
ADC_DRIV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000409e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000409e  00004132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800078  00800078  0000414a  2**0
                  ALLOC
  3 .stab         00003870  00000000  00000000  0000414c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f9  00000000  00000000  000079bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000aee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bfea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__vector_1>
       8:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_2>
       c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <main>
      8a:	0c 94 4d 20 	jmp	0x409a	; 0x409a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 16 20 	jmp	0x402c	; 0x402c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 16 20 	jmp	0x402c	; 0x402c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 26 20 	jmp	0x404c	; 0x404c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
//SET_BIT(SREG_REG,I_BIT);
asm("SEI");
     ca6:	78 94       	sei

}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
     cb6:	f8 94       	cli
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <M_EXTI_void_Enable+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <M_EXTI_void_Enable+0x8>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3c 83       	std	Y+4, r19	; 0x04
     cd6:	2b 83       	std	Y+3, r18	; 0x03
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	86 30       	cpi	r24, 0x06	; 6
     cde:	91 05       	cpc	r25, r1
     ce0:	59 f0       	breq	.+22     	; 0xcf8 <M_EXTI_void_Enable+0x3a>
     ce2:	2b 81       	ldd	r18, Y+3	; 0x03
     ce4:	3c 81       	ldd	r19, Y+4	; 0x04
     ce6:	27 30       	cpi	r18, 0x07	; 7
     ce8:	31 05       	cpc	r19, r1
     cea:	b1 f0       	breq	.+44     	; 0xd18 <M_EXTI_void_Enable+0x5a>
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	85 30       	cpi	r24, 0x05	; 5
     cf2:	91 05       	cpc	r25, r1
     cf4:	41 f1       	breq	.+80     	; 0xd46 <M_EXTI_void_Enable+0x88>
     cf6:	38 c0       	rjmp	.+112    	; 0xd68 <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
     cf8:	a5 e5       	ldi	r26, 0x55	; 85
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e5 e5       	ldi	r30, 0x55	; 85
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8c 7f       	andi	r24, 0xFC	; 252
     d04:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
     d06:	a5 e5       	ldi	r26, 0x55	; 85
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e5 e5       	ldi	r30, 0x55	; 85
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	90 81       	ld	r25, Z
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	8c 93       	st	X, r24
     d16:	28 c0       	rjmp	.+80     	; 0xd68 <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
     d18:	a5 e5       	ldi	r26, 0x55	; 85
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e5 e5       	ldi	r30, 0x55	; 85
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	83 7f       	andi	r24, 0xF3	; 243
     d24:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
     d26:	a5 e5       	ldi	r26, 0x55	; 85
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e5       	ldi	r30, 0x55	; 85
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	28 2f       	mov	r18, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	82 2b       	or	r24, r18
     d42:	8c 93       	st	X, r24
     d44:	11 c0       	rjmp	.+34     	; 0xd68 <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
     d46:	a4 e5       	ldi	r26, 0x54	; 84
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e4 e5       	ldi	r30, 0x54	; 84
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8f 7b       	andi	r24, 0xBF	; 191
     d52:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
     d54:	a5 e5       	ldi	r26, 0x55	; 85
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e5       	ldi	r30, 0x55	; 85
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	98 2f       	mov	r25, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	80 74       	andi	r24, 0x40	; 64
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	85 30       	cpi	r24, 0x05	; 5
     d6c:	b0 f0       	brcs	.+44     	; 0xd9a <M_EXTI_void_Enable+0xdc>
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 30       	cpi	r24, 0x08	; 8
     d72:	98 f4       	brcc	.+38     	; 0xd9a <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
     d74:	ab e5       	ldi	r26, 0x5B	; 91
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	eb e5       	ldi	r30, 0x5B	; 91
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <M_EXTI_void_Enable+0xd4>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <M_EXTI_void_Enable+0xd0>
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24

}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <M_EXTI_void_Disble+0x6>
     dae:	0f 92       	push	r0
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3b 83       	std	Y+3, r19	; 0x03
     dbe:	2a 83       	std	Y+2, r18	; 0x02
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	86 30       	cpi	r24, 0x06	; 6
     dc6:	91 05       	cpc	r25, r1
     dc8:	59 f0       	breq	.+22     	; 0xde0 <M_EXTI_void_Disble+0x38>
     dca:	2a 81       	ldd	r18, Y+2	; 0x02
     dcc:	3b 81       	ldd	r19, Y+3	; 0x03
     dce:	27 30       	cpi	r18, 0x07	; 7
     dd0:	31 05       	cpc	r19, r1
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <M_EXTI_void_Disble+0x48>
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	85 30       	cpi	r24, 0x05	; 5
     dda:	91 05       	cpc	r25, r1
     ddc:	89 f0       	breq	.+34     	; 0xe00 <M_EXTI_void_Disble+0x58>
     dde:	17 c0       	rjmp	.+46     	; 0xe0e <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
     de0:	ab e5       	ldi	r26, 0x5B	; 91
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	eb e5       	ldi	r30, 0x5B	; 91
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7b       	andi	r24, 0xBF	; 191
     dec:	8c 93       	st	X, r24
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
     df0:	ab e5       	ldi	r26, 0x5B	; 91
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	eb e5       	ldi	r30, 0x5B	; 91
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 77       	andi	r24, 0x7F	; 127
     dfc:	8c 93       	st	X, r24
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
     e00:	ab e5       	ldi	r26, 0x5B	; 91
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e5       	ldi	r30, 0x5B	; 91
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 7d       	andi	r24, 0xDF	; 223
     e0c:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	85 30       	cpi	r24, 0x05	; 5
     e12:	b8 f0       	brcs	.+46     	; 0xe42 <M_EXTI_void_Disble+0x9a>
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	88 30       	cpi	r24, 0x08	; 8
     e18:	a0 f4       	brcc	.+40     	; 0xe42 <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
     e1a:	ab e5       	ldi	r26, 0x5B	; 91
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e5       	ldi	r30, 0x5B	; 91
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <M_EXTI_void_Disble+0x90>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <M_EXTI_void_Disble+0x8c>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <M_EXTI_void_setCallback+0x6>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <M_EXTI_void_setCallback+0x8>
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3d 83       	std	Y+5, r19	; 0x05
     e6a:	2c 83       	std	Y+4, r18	; 0x04
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	86 30       	cpi	r24, 0x06	; 6
     e72:	91 05       	cpc	r25, r1
     e74:	59 f0       	breq	.+22     	; 0xe8c <M_EXTI_void_setCallback+0x3e>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	27 30       	cpi	r18, 0x07	; 7
     e7c:	31 05       	cpc	r19, r1
     e7e:	69 f0       	breq	.+26     	; 0xe9a <M_EXTI_void_setCallback+0x4c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	85 30       	cpi	r24, 0x05	; 5
     e86:	91 05       	cpc	r25, r1
     e88:	79 f0       	breq	.+30     	; 0xea8 <M_EXTI_void_setCallback+0x5a>
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	90 93 79 00 	sts	0x0079, r25
     e94:	80 93 78 00 	sts	0x0078, r24
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	90 93 7b 00 	sts	0x007B, r25
     ea2:	80 93 7a 00 	sts	0x007A, r24
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	90 93 7d 00 	sts	0x007D, r25
     eb0:	80 93 7c 00 	sts	0x007C, r24
			   break;
		}
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <__vector_1>:

ISR(INT0_vect)
{
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
     eee:	80 91 78 00 	lds	r24, 0x0078
     ef2:	90 91 79 00 	lds	r25, 0x0079
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	29 f0       	breq	.+10     	; 0xf04 <__vector_1+0x40>
	{
		Arr_CallBack[0]();
     efa:	e0 91 78 00 	lds	r30, 0x0078
     efe:	f0 91 79 00 	lds	r31, 0x0079
     f02:	09 95       	icall
	}
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	7f 91       	pop	r23
     f16:	6f 91       	pop	r22
     f18:	5f 91       	pop	r21
     f1a:	4f 91       	pop	r20
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_2>:
ISR(INT1_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
     f54:	80 91 7a 00 	lds	r24, 0x007A
     f58:	90 91 7b 00 	lds	r25, 0x007B
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	29 f0       	breq	.+10     	; 0xf6a <__vector_2+0x40>
		{
			Arr_CallBack[1]();
     f60:	e0 91 7a 00 	lds	r30, 0x007A
     f64:	f0 91 7b 00 	lds	r31, 0x007B
     f68:	09 95       	icall
		}
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <__vector_3>:
ISR(INT2_vect)
{
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
     fba:	80 91 7c 00 	lds	r24, 0x007C
     fbe:	90 91 7d 00 	lds	r25, 0x007D
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <__vector_3+0x40>
		{
			Arr_CallBack[2]();
     fc6:	e0 91 7c 00 	lds	r30, 0x007C
     fca:	f0 91 7d 00 	lds	r31, 0x007D
     fce:	09 95       	icall
		}
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	2d 97       	sbiw	r28, 0x0d	; 13
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	6a 83       	std	Y+2, r22	; 0x02
    100e:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3d 87       	std	Y+13, r19	; 0x0d
    1018:	2c 87       	std	Y+12, r18	; 0x0c
    101a:	8c 85       	ldd	r24, Y+12	; 0x0c
    101c:	9d 85       	ldd	r25, Y+13	; 0x0d
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <M_DIO_void_setPinDir+0x30>
    1024:	4f c0       	rjmp	.+158    	; 0x10c4 <M_DIO_void_setPinDir+0xce>
    1026:	2c 85       	ldd	r18, Y+12	; 0x0c
    1028:	3d 85       	ldd	r19, Y+13	; 0x0d
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	2c f4       	brge	.+10     	; 0x103a <M_DIO_void_setPinDir+0x44>
    1030:	8c 85       	ldd	r24, Y+12	; 0x0c
    1032:	9d 85       	ldd	r25, Y+13	; 0x0d
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	71 f0       	breq	.+28     	; 0x1054 <M_DIO_void_setPinDir+0x5e>
    1038:	ec c0       	rjmp	.+472    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
    103a:	2c 85       	ldd	r18, Y+12	; 0x0c
    103c:	3d 85       	ldd	r19, Y+13	; 0x0d
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <M_DIO_void_setPinDir+0x50>
    1044:	77 c0       	rjmp	.+238    	; 0x1134 <M_DIO_void_setPinDir+0x13e>
    1046:	8c 85       	ldd	r24, Y+12	; 0x0c
    1048:	9d 85       	ldd	r25, Y+13	; 0x0d
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <M_DIO_void_setPinDir+0x5c>
    1050:	a9 c0       	rjmp	.+338    	; 0x11a4 <M_DIO_void_setPinDir+0x1ae>
    1052:	df c0       	rjmp	.+446    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
	{
	case PORTA_ID :
		switch (DIRECTION)
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3b 87       	std	Y+11, r19	; 0x0b
    105c:	2a 87       	std	Y+10, r18	; 0x0a
    105e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1060:	9b 85       	ldd	r25, Y+11	; 0x0b
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	31 f0       	breq	.+12     	; 0x1072 <M_DIO_void_setPinDir+0x7c>
    1066:	2a 85       	ldd	r18, Y+10	; 0x0a
    1068:	3b 85       	ldd	r19, Y+11	; 0x0b
    106a:	21 30       	cpi	r18, 0x01	; 1
    106c:	31 05       	cpc	r19, r1
    106e:	b1 f0       	breq	.+44     	; 0x109c <M_DIO_void_setPinDir+0xa6>
    1070:	d0 c0       	rjmp	.+416    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    1072:	aa e3       	ldi	r26, 0x3A	; 58
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ea e3       	ldi	r30, 0x3A	; 58
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <M_DIO_void_setPinDir+0x9a>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <M_DIO_void_setPinDir+0x96>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	bb c0       	rjmp	.+374    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    109c:	aa e3       	ldi	r26, 0x3A	; 58
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <M_DIO_void_setPinDir+0xc4>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <M_DIO_void_setPinDir+0xc0>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	a7 c0       	rjmp	.+334    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	39 87       	std	Y+9, r19	; 0x09
    10cc:	28 87       	std	Y+8, r18	; 0x08
    10ce:	88 85       	ldd	r24, Y+8	; 0x08
    10d0:	99 85       	ldd	r25, Y+9	; 0x09
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	31 f0       	breq	.+12     	; 0x10e2 <M_DIO_void_setPinDir+0xec>
    10d6:	28 85       	ldd	r18, Y+8	; 0x08
    10d8:	39 85       	ldd	r19, Y+9	; 0x09
    10da:	21 30       	cpi	r18, 0x01	; 1
    10dc:	31 05       	cpc	r19, r1
    10de:	b1 f0       	breq	.+44     	; 0x110c <M_DIO_void_setPinDir+0x116>
    10e0:	98 c0       	rjmp	.+304    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <M_DIO_void_setPinDir+0x10a>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <M_DIO_void_setPinDir+0x106>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	83 c0       	rjmp	.+262    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <M_DIO_void_setPinDir+0x134>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <M_DIO_void_setPinDir+0x130>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6f c0       	rjmp	.+222    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3f 83       	std	Y+7, r19	; 0x07
    113c:	2e 83       	std	Y+6, r18	; 0x06
    113e:	8e 81       	ldd	r24, Y+6	; 0x06
    1140:	9f 81       	ldd	r25, Y+7	; 0x07
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	31 f0       	breq	.+12     	; 0x1152 <M_DIO_void_setPinDir+0x15c>
    1146:	2e 81       	ldd	r18, Y+6	; 0x06
    1148:	3f 81       	ldd	r19, Y+7	; 0x07
    114a:	21 30       	cpi	r18, 0x01	; 1
    114c:	31 05       	cpc	r19, r1
    114e:	b1 f0       	breq	.+44     	; 0x117c <M_DIO_void_setPinDir+0x186>
    1150:	60 c0       	rjmp	.+192    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    1152:	a4 e3       	ldi	r26, 0x34	; 52
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e4 e3       	ldi	r30, 0x34	; 52
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <M_DIO_void_setPinDir+0x17a>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <M_DIO_void_setPinDir+0x176>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	4b c0       	rjmp	.+150    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    117c:	a4 e3       	ldi	r26, 0x34	; 52
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e4 e3       	ldi	r30, 0x34	; 52
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <M_DIO_void_setPinDir+0x1a4>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <M_DIO_void_setPinDir+0x1a0>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	37 c0       	rjmp	.+110    	; 0x1212 <M_DIO_void_setPinDir+0x21c>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3d 83       	std	Y+5, r19	; 0x05
    11ac:	2c 83       	std	Y+4, r18	; 0x04
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	31 f0       	breq	.+12     	; 0x11c2 <M_DIO_void_setPinDir+0x1cc>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	21 30       	cpi	r18, 0x01	; 1
    11bc:	31 05       	cpc	r19, r1
    11be:	b1 f0       	breq	.+44     	; 0x11ec <M_DIO_void_setPinDir+0x1f6>
    11c0:	28 c0       	rjmp	.+80     	; 0x1212 <M_DIO_void_setPinDir+0x21c>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    11c2:	a1 e3       	ldi	r26, 0x31	; 49
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <M_DIO_void_setPinDir+0x1ea>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <M_DIO_void_setPinDir+0x1e6>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	13 c0       	rjmp	.+38     	; 0x1212 <M_DIO_void_setPinDir+0x21c>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    11ec:	a1 e3       	ldi	r26, 0x31	; 49
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e1 e3       	ldi	r30, 0x31	; 49
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <M_DIO_void_setPinDir+0x214>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <M_DIO_void_setPinDir+0x210>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    1212:	2d 96       	adiw	r28, 0x0d	; 13
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	2d 97       	sbiw	r28, 0x0d	; 13
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	6a 83       	std	Y+2, r22	; 0x02
    123c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3d 87       	std	Y+13, r19	; 0x0d
    1246:	2c 87       	std	Y+12, r18	; 0x0c
    1248:	8c 85       	ldd	r24, Y+12	; 0x0c
    124a:	9d 85       	ldd	r25, Y+13	; 0x0d
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <M_DIO_void_setPinValue+0x30>
    1252:	4f c0       	rjmp	.+158    	; 0x12f2 <M_DIO_void_setPinValue+0xce>
    1254:	2c 85       	ldd	r18, Y+12	; 0x0c
    1256:	3d 85       	ldd	r19, Y+13	; 0x0d
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <M_DIO_void_setPinValue+0x44>
    125e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1260:	9d 85       	ldd	r25, Y+13	; 0x0d
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	71 f0       	breq	.+28     	; 0x1282 <M_DIO_void_setPinValue+0x5e>
    1266:	ec c0       	rjmp	.+472    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
    1268:	2c 85       	ldd	r18, Y+12	; 0x0c
    126a:	3d 85       	ldd	r19, Y+13	; 0x0d
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <M_DIO_void_setPinValue+0x50>
    1272:	77 c0       	rjmp	.+238    	; 0x1362 <M_DIO_void_setPinValue+0x13e>
    1274:	8c 85       	ldd	r24, Y+12	; 0x0c
    1276:	9d 85       	ldd	r25, Y+13	; 0x0d
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <M_DIO_void_setPinValue+0x5c>
    127e:	a9 c0       	rjmp	.+338    	; 0x13d2 <M_DIO_void_setPinValue+0x1ae>
    1280:	df c0       	rjmp	.+446    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
		{
		case PORTA_ID :
			switch (value)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3b 87       	std	Y+11, r19	; 0x0b
    128a:	2a 87       	std	Y+10, r18	; 0x0a
    128c:	8a 85       	ldd	r24, Y+10	; 0x0a
    128e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	31 f0       	breq	.+12     	; 0x12a0 <M_DIO_void_setPinValue+0x7c>
    1294:	2a 85       	ldd	r18, Y+10	; 0x0a
    1296:	3b 85       	ldd	r19, Y+11	; 0x0b
    1298:	21 30       	cpi	r18, 0x01	; 1
    129a:	31 05       	cpc	r19, r1
    129c:	b1 f0       	breq	.+44     	; 0x12ca <M_DIO_void_setPinValue+0xa6>
    129e:	d0 c0       	rjmp	.+416    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <M_DIO_void_setPinValue+0x9a>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <M_DIO_void_setPinValue+0x96>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	bb c0       	rjmp	.+374    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <M_DIO_void_setPinValue+0xc4>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <M_DIO_void_setPinValue+0xc0>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	a7 c0       	rjmp	.+334    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	39 87       	std	Y+9, r19	; 0x09
    12fa:	28 87       	std	Y+8, r18	; 0x08
    12fc:	88 85       	ldd	r24, Y+8	; 0x08
    12fe:	99 85       	ldd	r25, Y+9	; 0x09
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	31 f0       	breq	.+12     	; 0x1310 <M_DIO_void_setPinValue+0xec>
    1304:	28 85       	ldd	r18, Y+8	; 0x08
    1306:	39 85       	ldd	r19, Y+9	; 0x09
    1308:	21 30       	cpi	r18, 0x01	; 1
    130a:	31 05       	cpc	r19, r1
    130c:	b1 f0       	breq	.+44     	; 0x133a <M_DIO_void_setPinValue+0x116>
    130e:	98 c0       	rjmp	.+304    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <M_DIO_void_setPinValue+0x10a>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <M_DIO_void_setPinValue+0x106>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	83 c0       	rjmp	.+262    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    133a:	a8 e3       	ldi	r26, 0x38	; 56
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e8 e3       	ldi	r30, 0x38	; 56
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <M_DIO_void_setPinValue+0x134>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <M_DIO_void_setPinValue+0x130>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	6f c0       	rjmp	.+222    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3f 83       	std	Y+7, r19	; 0x07
    136a:	2e 83       	std	Y+6, r18	; 0x06
    136c:	8e 81       	ldd	r24, Y+6	; 0x06
    136e:	9f 81       	ldd	r25, Y+7	; 0x07
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	31 f0       	breq	.+12     	; 0x1380 <M_DIO_void_setPinValue+0x15c>
    1374:	2e 81       	ldd	r18, Y+6	; 0x06
    1376:	3f 81       	ldd	r19, Y+7	; 0x07
    1378:	21 30       	cpi	r18, 0x01	; 1
    137a:	31 05       	cpc	r19, r1
    137c:	b1 f0       	breq	.+44     	; 0x13aa <M_DIO_void_setPinValue+0x186>
    137e:	60 c0       	rjmp	.+192    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <M_DIO_void_setPinValue+0x17a>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <M_DIO_void_setPinValue+0x176>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	4b c0       	rjmp	.+150    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    13aa:	a5 e3       	ldi	r26, 0x35	; 53
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e3       	ldi	r30, 0x35	; 53
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <M_DIO_void_setPinValue+0x1a4>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <M_DIO_void_setPinValue+0x1a0>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	37 c0       	rjmp	.+110    	; 0x1440 <M_DIO_void_setPinValue+0x21c>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3d 83       	std	Y+5, r19	; 0x05
    13da:	2c 83       	std	Y+4, r18	; 0x04
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <M_DIO_void_setPinValue+0x1cc>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	21 30       	cpi	r18, 0x01	; 1
    13ea:	31 05       	cpc	r19, r1
    13ec:	b1 f0       	breq	.+44     	; 0x141a <M_DIO_void_setPinValue+0x1f6>
    13ee:	28 c0       	rjmp	.+80     	; 0x1440 <M_DIO_void_setPinValue+0x21c>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    13f0:	a2 e3       	ldi	r26, 0x32	; 50
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e2 e3       	ldi	r30, 0x32	; 50
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <M_DIO_void_setPinValue+0x1ea>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <M_DIO_void_setPinValue+0x1e6>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <M_DIO_void_setPinValue+0x21c>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    141a:	a2 e3       	ldi	r26, 0x32	; 50
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <M_DIO_void_setPinValue+0x214>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <M_DIO_void_setPinValue+0x210>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    1440:	2d 96       	adiw	r28, 0x0d	; 13
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <M_DIO_void_getPinValue+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <M_DIO_void_getPinValue+0x8>
    145a:	00 d0       	rcall	.+0      	; 0x145c <M_DIO_void_getPinValue+0xa>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	6a 83       	std	Y+2, r22	; 0x02
    1464:	5c 83       	std	Y+4, r21	; 0x04
    1466:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3e 83       	std	Y+6, r19	; 0x06
    1470:	2d 83       	std	Y+5, r18	; 0x05
    1472:	4d 81       	ldd	r20, Y+5	; 0x05
    1474:	5e 81       	ldd	r21, Y+6	; 0x06
    1476:	41 30       	cpi	r20, 0x01	; 1
    1478:	51 05       	cpc	r21, r1
    147a:	59 f1       	breq	.+86     	; 0x14d2 <M_DIO_void_getPinValue+0x80>
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	91 05       	cpc	r25, r1
    1484:	34 f4       	brge	.+12     	; 0x1492 <M_DIO_void_getPinValue+0x40>
    1486:	2d 81       	ldd	r18, Y+5	; 0x05
    1488:	3e 81       	ldd	r19, Y+6	; 0x06
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	69 f0       	breq	.+26     	; 0x14aa <M_DIO_void_getPinValue+0x58>
    1490:	5b c0       	rjmp	.+182    	; 0x1548 <M_DIO_void_getPinValue+0xf6>
    1492:	4d 81       	ldd	r20, Y+5	; 0x05
    1494:	5e 81       	ldd	r21, Y+6	; 0x06
    1496:	42 30       	cpi	r20, 0x02	; 2
    1498:	51 05       	cpc	r21, r1
    149a:	79 f1       	breq	.+94     	; 0x14fa <M_DIO_void_getPinValue+0xa8>
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <M_DIO_void_getPinValue+0x56>
    14a6:	3d c0       	rjmp	.+122    	; 0x1522 <M_DIO_void_getPinValue+0xd0>
    14a8:	4f c0       	rjmp	.+158    	; 0x1548 <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    14aa:	e9 e3       	ldi	r30, 0x39	; 57
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a9 01       	movw	r20, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <M_DIO_void_getPinValue+0x70>
    14be:	55 95       	asr	r21
    14c0:	47 95       	ror	r20
    14c2:	8a 95       	dec	r24
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <M_DIO_void_getPinValue+0x6c>
    14c6:	ca 01       	movw	r24, r20
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	eb 81       	ldd	r30, Y+3	; 0x03
    14cc:	fc 81       	ldd	r31, Y+4	; 0x04
    14ce:	80 83       	st	Z, r24
    14d0:	3b c0       	rjmp	.+118    	; 0x1548 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    14d2:	e6 e3       	ldi	r30, 0x36	; 54
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <M_DIO_void_getPinValue+0x98>
    14e6:	55 95       	asr	r21
    14e8:	47 95       	ror	r20
    14ea:	8a 95       	dec	r24
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <M_DIO_void_getPinValue+0x94>
    14ee:	ca 01       	movw	r24, r20
    14f0:	81 70       	andi	r24, 0x01	; 1
    14f2:	eb 81       	ldd	r30, Y+3	; 0x03
    14f4:	fc 81       	ldd	r31, Y+4	; 0x04
    14f6:	80 83       	st	Z, r24
    14f8:	27 c0       	rjmp	.+78     	; 0x1548 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    14fa:	e3 e3       	ldi	r30, 0x33	; 51
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a9 01       	movw	r20, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <M_DIO_void_getPinValue+0xc0>
    150e:	55 95       	asr	r21
    1510:	47 95       	ror	r20
    1512:	8a 95       	dec	r24
    1514:	e2 f7       	brpl	.-8      	; 0x150e <M_DIO_void_getPinValue+0xbc>
    1516:	ca 01       	movw	r24, r20
    1518:	81 70       	andi	r24, 0x01	; 1
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	80 83       	st	Z, r24
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1522:	e0 e3       	ldi	r30, 0x30	; 48
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a9 01       	movw	r20, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <M_DIO_void_getPinValue+0xe8>
    1536:	55 95       	asr	r21
    1538:	47 95       	ror	r20
    153a:	8a 95       	dec	r24
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <M_DIO_void_getPinValue+0xe4>
    153e:	ca 01       	movw	r24, r20
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	eb 81       	ldd	r30, Y+3	; 0x03
    1544:	fc 81       	ldd	r31, Y+4	; 0x04
    1546:	80 83       	st	Z, r24
		break;
	}
}
    1548:	26 96       	adiw	r28, 0x06	; 6
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <M_DIO_void_TogPinValue+0x6>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <M_DIO_void_TogPinValue+0x8>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3c 83       	std	Y+4, r19	; 0x04
    1572:	2b 83       	std	Y+3, r18	; 0x03
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	49 f1       	breq	.+82     	; 0x15d0 <M_DIO_void_TogPinValue+0x76>
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <M_DIO_void_TogPinValue+0x38>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	61 f0       	breq	.+24     	; 0x15a8 <M_DIO_void_TogPinValue+0x4e>
    1590:	5a c0       	rjmp	.+180    	; 0x1646 <M_DIO_void_TogPinValue+0xec>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	71 f1       	breq	.+92     	; 0x15f8 <M_DIO_void_TogPinValue+0x9e>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	e9 f1       	breq	.+122    	; 0x1620 <M_DIO_void_TogPinValue+0xc6>
    15a6:	4f c0       	rjmp	.+158    	; 0x1646 <M_DIO_void_TogPinValue+0xec>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    15a8:	ab e3       	ldi	r26, 0x3B	; 59
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <M_DIO_void_TogPinValue+0x6c>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <M_DIO_void_TogPinValue+0x68>
    15ca:	84 27       	eor	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	3b c0       	rjmp	.+118    	; 0x1646 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <M_DIO_void_TogPinValue+0x94>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <M_DIO_void_TogPinValue+0x90>
    15f2:	84 27       	eor	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	27 c0       	rjmp	.+78     	; 0x1646 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    15f8:	a5 e3       	ldi	r26, 0x35	; 53
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e3       	ldi	r30, 0x35	; 53
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <M_DIO_void_TogPinValue+0xbc>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <M_DIO_void_TogPinValue+0xb8>
    161a:	84 27       	eor	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	13 c0       	rjmp	.+38     	; 0x1646 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <M_DIO_void_TogPinValue+0xe4>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <M_DIO_void_TogPinValue+0xe0>
    1642:	84 27       	eor	r24, r20
    1644:	8c 93       	st	X, r24
			break;
		}


}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <M_ADC_voidInit>:
#include"ADC_priv.h"
#include"ADC_config.h"
#include "ADC_int.h"

void M_ADC_voidInit()
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
// SET references
ADMUX_REG &= 0b00111111;
    165c:	a7 e2       	ldi	r26, 0x27	; 39
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e7 e2       	ldi	r30, 0x27	; 39
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	8f 73       	andi	r24, 0x3F	; 63
    1668:	8c 93       	st	X, r24
SET_BIT(ADMUX_REG,REFS0_BIT);
    166a:	a7 e2       	ldi	r26, 0x27	; 39
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e7 e2       	ldi	r30, 0x27	; 39
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	8c 93       	st	X, r24

//choose channel
//choose prescaller
SET_BIT(ADCSRA_REG,ADPS0);
    1678:	a6 e2       	ldi	r26, 0x26	; 38
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e6 e2       	ldi	r30, 0x26	; 38
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	81 60       	ori	r24, 0x01	; 1
    1684:	8c 93       	st	X, r24
SET_BIT(ADCSRA_REG,ADPS1);
    1686:	a6 e2       	ldi	r26, 0x26	; 38
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e6 e2       	ldi	r30, 0x26	; 38
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	82 60       	ori	r24, 0x02	; 2
    1692:	8c 93       	st	X, r24
SET_BIT(ADCSRA_REG,ADPS2);
    1694:	a6 e2       	ldi	r26, 0x26	; 38
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e6 e2       	ldi	r30, 0x26	; 38
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	84 60       	ori	r24, 0x04	; 4
    16a0:	8c 93       	st	X, r24
//ENABLE ADC
SET_BIT(ADCSRA_REG,ADEN);
    16a2:	a6 e2       	ldi	r26, 0x26	; 38
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e6 e2       	ldi	r30, 0x26	; 38
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	8c 93       	st	X, r24

}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <M_ADC_voidRead>:
void M_ADC_voidRead(u16 *Value)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <M_ADC_voidRead+0x6>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
	//START CONVERSION;
SET_BIT(ADCSRA_REG,ADSC);
    16c4:	a6 e2       	ldi	r26, 0x26	; 38
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e6 e2       	ldi	r30, 0x26	; 38
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 64       	ori	r24, 0x40	; 64
    16d0:	8c 93       	st	X, r24
while(GET_BIT(ADCSRA_REG,ADSC));
    16d2:	e6 e2       	ldi	r30, 0x26	; 38
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	82 95       	swap	r24
    16da:	86 95       	lsr	r24
    16dc:	86 95       	lsr	r24
    16de:	83 70       	andi	r24, 0x03	; 3
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	81 70       	andi	r24, 0x01	; 1
    16e6:	90 70       	andi	r25, 0x00	; 0
    16e8:	88 23       	and	r24, r24
    16ea:	99 f7       	brne	.-26     	; 0x16d2 <M_ADC_voidRead+0x1c>
{

}
*Value=ADCL_REG;
    16ec:	e4 e2       	ldi	r30, 0x24	; 36
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	e9 81       	ldd	r30, Y+1	; 0x01
    16f6:	fa 81       	ldd	r31, Y+2	; 0x02
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <H_SSD_void_init>:



//u8 arr[]={0x3f,};
void H_SSD_void_init(void)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_setPinDir(SSD_LED_A_PORT,  SSD_LED_A_PIN , OUT);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT,  SSD_LED_B_PIN , OUT);
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT,  SSD_LED_C_PIN , OUT);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	63 e0       	ldi	r22, 0x03	; 3
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT,  SSD_LED_D_PIN , OUT);
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	64 e0       	ldi	r22, 0x04	; 4
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT,  SSD_LED_E_PIN , OUT);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	65 e0       	ldi	r22, 0x05	; 5
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT,  SSD_LED_F_PIN , OUT);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	66 e0       	ldi	r22, 0x06	; 6
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT,  SSD_LED_G_PIN , OUT);
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	67 e0       	ldi	r22, 0x07	; 7
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT,  SSD_LED_DOT_PIN , OUT);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>

	//ENABLE DIGITS 1

	M_DIO_void_setPinDir(SSD_DIG_1_EN_PORT,  SSD_DIG_1_EN_PIN , OUT);
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	66 e0       	ldi	r22, 0x06	; 6
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_DIG_2_EN_PORT,  SSD_DIG_2_EN_PIN , OUT);
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	67 e0       	ldi	r22, 0x07	; 7
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	a7 97       	sbiw	r28, 0x27	; 39
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	8b a3       	std	Y+35, r24	; 0x23
	if(number>99)
    178e:	8b a1       	ldd	r24, Y+35	; 0x23
    1790:	84 36       	cpi	r24, 0x64	; 100
    1792:	08 f0       	brcs	.+2      	; 0x1796 <H_SSD_void_DisplayNumber+0x1e>
    1794:	04 c5       	rjmp	.+2568   	; 0x219e <H_SSD_void_DisplayNumber+0xa26>
	{
		return;
	}
	u32 i ;
	u8 units =number % 10;
    1796:	8b a1       	ldd	r24, Y+35	; 0x23
    1798:	9a e0       	ldi	r25, 0x0A	; 10
    179a:	69 2f       	mov	r22, r25
    179c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__udivmodqi4>
    17a0:	89 2f       	mov	r24, r25
    17a2:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    17a4:	8b a1       	ldd	r24, Y+35	; 0x23
    17a6:	9a e0       	ldi	r25, 0x0A	; 10
    17a8:	69 2f       	mov	r22, r25
    17aa:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__udivmodqi4>
    17ae:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    17b0:	1f 8e       	std	Y+31, r1	; 0x1f
    17b2:	18 a2       	std	Y+32, r1	; 0x20
    17b4:	19 a2       	std	Y+33, r1	; 0x21
    17b6:	1a a2       	std	Y+34, r1	; 0x22
    17b8:	e8 c4       	rjmp	.+2512   	; 0x218a <H_SSD_void_DisplayNumber+0xa12>

		switch (units)
    17ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	3f a3       	std	Y+39, r19	; 0x27
    17c2:	2e a3       	std	Y+38, r18	; 0x26
    17c4:	8e a1       	ldd	r24, Y+38	; 0x26
    17c6:	9f a1       	ldd	r25, Y+39	; 0x27
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	91 05       	cpc	r25, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <H_SSD_void_DisplayNumber+0x58>
    17ce:	f0 c0       	rjmp	.+480    	; 0x19b0 <H_SSD_void_DisplayNumber+0x238>
    17d0:	2e a1       	ldd	r18, Y+38	; 0x26
    17d2:	3f a1       	ldd	r19, Y+39	; 0x27
    17d4:	25 30       	cpi	r18, 0x05	; 5
    17d6:	31 05       	cpc	r19, r1
    17d8:	ec f4       	brge	.+58     	; 0x1814 <H_SSD_void_DisplayNumber+0x9c>
    17da:	8e a1       	ldd	r24, Y+38	; 0x26
    17dc:	9f a1       	ldd	r25, Y+39	; 0x27
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <H_SSD_void_DisplayNumber+0x6e>
    17e4:	6a c0       	rjmp	.+212    	; 0x18ba <H_SSD_void_DisplayNumber+0x142>
    17e6:	2e a1       	ldd	r18, Y+38	; 0x26
    17e8:	3f a1       	ldd	r19, Y+39	; 0x27
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	2c f4       	brge	.+10     	; 0x17fa <H_SSD_void_DisplayNumber+0x82>
    17f0:	8e a1       	ldd	r24, Y+38	; 0x26
    17f2:	9f a1       	ldd	r25, Y+39	; 0x27
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	99 f1       	breq	.+102    	; 0x185e <H_SSD_void_DisplayNumber+0xe6>
    17f8:	d0 c1       	rjmp	.+928    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
    17fa:	2e a1       	ldd	r18, Y+38	; 0x26
    17fc:	3f a1       	ldd	r19, Y+39	; 0x27
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <H_SSD_void_DisplayNumber+0x8e>
    1804:	83 c0       	rjmp	.+262    	; 0x190c <H_SSD_void_DisplayNumber+0x194>
    1806:	8e a1       	ldd	r24, Y+38	; 0x26
    1808:	9f a1       	ldd	r25, Y+39	; 0x27
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <H_SSD_void_DisplayNumber+0x9a>
    1810:	a6 c0       	rjmp	.+332    	; 0x195e <H_SSD_void_DisplayNumber+0x1e6>
    1812:	c3 c1       	rjmp	.+902    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
    1814:	2e a1       	ldd	r18, Y+38	; 0x26
    1816:	3f a1       	ldd	r19, Y+39	; 0x27
    1818:	27 30       	cpi	r18, 0x07	; 7
    181a:	31 05       	cpc	r19, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <H_SSD_void_DisplayNumber+0xa8>
    181e:	43 c1       	rjmp	.+646    	; 0x1aa6 <H_SSD_void_DisplayNumber+0x32e>
    1820:	8e a1       	ldd	r24, Y+38	; 0x26
    1822:	9f a1       	ldd	r25, Y+39	; 0x27
    1824:	88 30       	cpi	r24, 0x08	; 8
    1826:	91 05       	cpc	r25, r1
    1828:	6c f4       	brge	.+26     	; 0x1844 <H_SSD_void_DisplayNumber+0xcc>
    182a:	2e a1       	ldd	r18, Y+38	; 0x26
    182c:	3f a1       	ldd	r19, Y+39	; 0x27
    182e:	25 30       	cpi	r18, 0x05	; 5
    1830:	31 05       	cpc	r19, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <H_SSD_void_DisplayNumber+0xbe>
    1834:	e6 c0       	rjmp	.+460    	; 0x1a02 <H_SSD_void_DisplayNumber+0x28a>
    1836:	8e a1       	ldd	r24, Y+38	; 0x26
    1838:	9f a1       	ldd	r25, Y+39	; 0x27
    183a:	86 30       	cpi	r24, 0x06	; 6
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <H_SSD_void_DisplayNumber+0xca>
    1840:	09 c1       	rjmp	.+530    	; 0x1a54 <H_SSD_void_DisplayNumber+0x2dc>
    1842:	ab c1       	rjmp	.+854    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
    1844:	2e a1       	ldd	r18, Y+38	; 0x26
    1846:	3f a1       	ldd	r19, Y+39	; 0x27
    1848:	28 30       	cpi	r18, 0x08	; 8
    184a:	31 05       	cpc	r19, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <H_SSD_void_DisplayNumber+0xd8>
    184e:	54 c1       	rjmp	.+680    	; 0x1af8 <H_SSD_void_DisplayNumber+0x380>
    1850:	8e a1       	ldd	r24, Y+38	; 0x26
    1852:	9f a1       	ldd	r25, Y+39	; 0x27
    1854:	89 30       	cpi	r24, 0x09	; 9
    1856:	91 05       	cpc	r25, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <H_SSD_void_DisplayNumber+0xe4>
    185a:	77 c1       	rjmp	.+750    	; 0x1b4a <H_SSD_void_DisplayNumber+0x3d2>
    185c:	9e c1       	rjmp	.+828    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
		{
		case 0:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	62 e0       	ldi	r22, 0x02	; 2
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	63 e0       	ldi	r22, 0x03	; 3
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	64 e0       	ldi	r22, 0x04	; 4
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	65 e0       	ldi	r22, 0x05	; 5
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	66 e0       	ldi	r22, 0x06	; 6
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	67 e0       	ldi	r22, 0x07	; 7
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    18b8:	70 c1       	rjmp	.+736    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;

		case 1:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	63 e0       	ldi	r22, 0x03	; 3
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	64 e0       	ldi	r22, 0x04	; 4
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	65 e0       	ldi	r22, 0x05	; 5
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	66 e0       	ldi	r22, 0x06	; 6
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	67 e0       	ldi	r22, 0x07	; 7
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    190a:	47 c1       	rjmp	.+654    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;

		case 2:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	41 e0       	ldi	r20, 0x01	; 1
    1912:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	62 e0       	ldi	r22, 0x02	; 2
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	63 e0       	ldi	r22, 0x03	; 3
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	65 e0       	ldi	r22, 0x05	; 5
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	66 e0       	ldi	r22, 0x06	; 6
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	67 e0       	ldi	r22, 0x07	; 7
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    195c:	1e c1       	rjmp	.+572    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;

		case 3:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	66 e0       	ldi	r22, 0x06	; 6
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	67 e0       	ldi	r22, 0x07	; 7
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    19ae:	f5 c0       	rjmp	.+490    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;

		case 4:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	64 e0       	ldi	r22, 0x04	; 4
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	65 e0       	ldi	r22, 0x05	; 5
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	66 e0       	ldi	r22, 0x06	; 6
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	67 e0       	ldi	r22, 0x07	; 7
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1a00:	cc c0       	rjmp	.+408    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;

		case 5:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	65 e0       	ldi	r22, 0x05	; 5
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	66 e0       	ldi	r22, 0x06	; 6
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	67 e0       	ldi	r22, 0x07	; 7
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1a52:	a3 c0       	rjmp	.+326    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;
		case 6:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	63 e0       	ldi	r22, 0x03	; 3
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	64 e0       	ldi	r22, 0x04	; 4
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	65 e0       	ldi	r22, 0x05	; 5
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	66 e0       	ldi	r22, 0x06	; 6
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	67 e0       	ldi	r22, 0x07	; 7
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1aa4:	7a c0       	rjmp	.+244    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;
		case 7:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	62 e0       	ldi	r22, 0x02	; 2
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	63 e0       	ldi	r22, 0x03	; 3
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	65 e0       	ldi	r22, 0x05	; 5
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	66 e0       	ldi	r22, 0x06	; 6
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	67 e0       	ldi	r22, 0x07	; 7
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1af6:	51 c0       	rjmp	.+162    	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;
		case 8:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	41 e0       	ldi	r20, 0x01	; 1
    1b08:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	63 e0       	ldi	r22, 0x03	; 3
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	64 e0       	ldi	r22, 0x04	; 4
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	65 e0       	ldi	r22, 0x05	; 5
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	66 e0       	ldi	r22, 0x06	; 6
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	67 e0       	ldi	r22, 0x07	; 7
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1b48:	28 c0       	rjmp	.+80     	; 0x1b9a <H_SSD_void_DisplayNumber+0x422>
			break;
		case 9:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	63 e0       	ldi	r22, 0x03	; 3
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	64 e0       	ldi	r22, 0x04	; 4
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	65 e0       	ldi	r22, 0x05	; 5
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	66 e0       	ldi	r22, 0x06	; 6
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	67 e0       	ldi	r22, 0x07	; 7
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>


		}
		//enable digit 1
		//disable digit 2
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,HIGH);
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	66 e0       	ldi	r22, 0x06	; 6
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	67 e0       	ldi	r22, 0x07	; 7
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	89 8f       	std	Y+25, r24	; 0x19
    1bb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bba:	ab 8f       	std	Y+27, r26	; 0x1b
    1bbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	48 ec       	ldi	r20, 0xC8	; 200
    1bcc:	53 e4       	ldi	r21, 0x43	; 67
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8d 8b       	std	Y+21, r24	; 0x15
    1bd8:	9e 8b       	std	Y+22, r25	; 0x16
    1bda:	af 8b       	std	Y+23, r26	; 0x17
    1bdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bde:	6d 89       	ldd	r22, Y+21	; 0x15
    1be0:	7e 89       	ldd	r23, Y+22	; 0x16
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <H_SSD_void_DisplayNumber+0x488>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9c 8b       	std	Y+20, r25	; 0x14
    1bfc:	8b 8b       	std	Y+19, r24	; 0x13
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <H_SSD_void_DisplayNumber+0x506>
	else if (__tmp > 65535)
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <H_SSD_void_DisplayNumber+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <H_SSD_void_DisplayNumber+0x4e8>
    1c42:	88 e2       	ldi	r24, 0x28	; 40
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c4a:	89 89       	ldd	r24, Y+17	; 0x11
    1c4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <H_SSD_void_DisplayNumber+0x4d6>
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	9c 89       	ldd	r25, Y+20	; 0x14
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <H_SSD_void_DisplayNumber+0x4ca>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <H_SSD_void_DisplayNumber+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	98 8b       	std	Y+16, r25	; 0x10
    1c84:	8f 87       	std	Y+15, r24	; 0x0f
    1c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c88:	98 89       	ldd	r25, Y+16	; 0x10
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <H_SSD_void_DisplayNumber+0x512>
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,LOW);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	66 e0       	ldi	r22, 0x06	; 6
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
		switch (tens)
    1c9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	3d a3       	std	Y+37, r19	; 0x25
    1ca4:	2c a3       	std	Y+36, r18	; 0x24
    1ca6:	8c a1       	ldd	r24, Y+36	; 0x24
    1ca8:	9d a1       	ldd	r25, Y+37	; 0x25
    1caa:	84 30       	cpi	r24, 0x04	; 4
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <H_SSD_void_DisplayNumber+0x53a>
    1cb0:	f0 c0       	rjmp	.+480    	; 0x1e92 <H_SSD_void_DisplayNumber+0x71a>
    1cb2:	2c a1       	ldd	r18, Y+36	; 0x24
    1cb4:	3d a1       	ldd	r19, Y+37	; 0x25
    1cb6:	25 30       	cpi	r18, 0x05	; 5
    1cb8:	31 05       	cpc	r19, r1
    1cba:	ec f4       	brge	.+58     	; 0x1cf6 <H_SSD_void_DisplayNumber+0x57e>
    1cbc:	8c a1       	ldd	r24, Y+36	; 0x24
    1cbe:	9d a1       	ldd	r25, Y+37	; 0x25
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <H_SSD_void_DisplayNumber+0x550>
    1cc6:	6a c0       	rjmp	.+212    	; 0x1d9c <H_SSD_void_DisplayNumber+0x624>
    1cc8:	2c a1       	ldd	r18, Y+36	; 0x24
    1cca:	3d a1       	ldd	r19, Y+37	; 0x25
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <H_SSD_void_DisplayNumber+0x564>
    1cd2:	8c a1       	ldd	r24, Y+36	; 0x24
    1cd4:	9d a1       	ldd	r25, Y+37	; 0x25
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	99 f1       	breq	.+102    	; 0x1d40 <H_SSD_void_DisplayNumber+0x5c8>
    1cda:	d0 c1       	rjmp	.+928    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
    1cdc:	2c a1       	ldd	r18, Y+36	; 0x24
    1cde:	3d a1       	ldd	r19, Y+37	; 0x25
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <H_SSD_void_DisplayNumber+0x570>
    1ce6:	83 c0       	rjmp	.+262    	; 0x1dee <H_SSD_void_DisplayNumber+0x676>
    1ce8:	8c a1       	ldd	r24, Y+36	; 0x24
    1cea:	9d a1       	ldd	r25, Y+37	; 0x25
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <H_SSD_void_DisplayNumber+0x57c>
    1cf2:	a6 c0       	rjmp	.+332    	; 0x1e40 <H_SSD_void_DisplayNumber+0x6c8>
    1cf4:	c3 c1       	rjmp	.+902    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
    1cf6:	2c a1       	ldd	r18, Y+36	; 0x24
    1cf8:	3d a1       	ldd	r19, Y+37	; 0x25
    1cfa:	27 30       	cpi	r18, 0x07	; 7
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <H_SSD_void_DisplayNumber+0x58a>
    1d00:	43 c1       	rjmp	.+646    	; 0x1f88 <H_SSD_void_DisplayNumber+0x810>
    1d02:	8c a1       	ldd	r24, Y+36	; 0x24
    1d04:	9d a1       	ldd	r25, Y+37	; 0x25
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	91 05       	cpc	r25, r1
    1d0a:	6c f4       	brge	.+26     	; 0x1d26 <H_SSD_void_DisplayNumber+0x5ae>
    1d0c:	2c a1       	ldd	r18, Y+36	; 0x24
    1d0e:	3d a1       	ldd	r19, Y+37	; 0x25
    1d10:	25 30       	cpi	r18, 0x05	; 5
    1d12:	31 05       	cpc	r19, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <H_SSD_void_DisplayNumber+0x5a0>
    1d16:	e6 c0       	rjmp	.+460    	; 0x1ee4 <H_SSD_void_DisplayNumber+0x76c>
    1d18:	8c a1       	ldd	r24, Y+36	; 0x24
    1d1a:	9d a1       	ldd	r25, Y+37	; 0x25
    1d1c:	86 30       	cpi	r24, 0x06	; 6
    1d1e:	91 05       	cpc	r25, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <H_SSD_void_DisplayNumber+0x5ac>
    1d22:	09 c1       	rjmp	.+530    	; 0x1f36 <H_SSD_void_DisplayNumber+0x7be>
    1d24:	ab c1       	rjmp	.+854    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
    1d26:	2c a1       	ldd	r18, Y+36	; 0x24
    1d28:	3d a1       	ldd	r19, Y+37	; 0x25
    1d2a:	28 30       	cpi	r18, 0x08	; 8
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <H_SSD_void_DisplayNumber+0x5ba>
    1d30:	54 c1       	rjmp	.+680    	; 0x1fda <H_SSD_void_DisplayNumber+0x862>
    1d32:	8c a1       	ldd	r24, Y+36	; 0x24
    1d34:	9d a1       	ldd	r25, Y+37	; 0x25
    1d36:	89 30       	cpi	r24, 0x09	; 9
    1d38:	91 05       	cpc	r25, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <H_SSD_void_DisplayNumber+0x5c6>
    1d3c:	77 c1       	rjmp	.+750    	; 0x202c <H_SSD_void_DisplayNumber+0x8b4>
    1d3e:	9e c1       	rjmp	.+828    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
		{
		case 0:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	63 e0       	ldi	r22, 0x03	; 3
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	64 e0       	ldi	r22, 0x04	; 4
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	65 e0       	ldi	r22, 0x05	; 5
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	66 e0       	ldi	r22, 0x06	; 6
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1d9a:	70 c1       	rjmp	.+736    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;

				case 1:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	64 e0       	ldi	r22, 0x04	; 4
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	65 e0       	ldi	r22, 0x05	; 5
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	66 e0       	ldi	r22, 0x06	; 6
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	67 e0       	ldi	r22, 0x07	; 7
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1dec:	47 c1       	rjmp	.+654    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;

				case 2:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	63 e0       	ldi	r22, 0x03	; 3
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	64 e0       	ldi	r22, 0x04	; 4
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	65 e0       	ldi	r22, 0x05	; 5
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	66 e0       	ldi	r22, 0x06	; 6
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	67 e0       	ldi	r22, 0x07	; 7
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1e3e:	1e c1       	rjmp	.+572    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;

				case 3:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	66 e0       	ldi	r22, 0x06	; 6
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1e90:	f5 c0       	rjmp	.+490    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;

				case 4:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	62 e0       	ldi	r22, 0x02	; 2
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	65 e0       	ldi	r22, 0x05	; 5
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	66 e0       	ldi	r22, 0x06	; 6
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	67 e0       	ldi	r22, 0x07	; 7
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1ee2:	cc c0       	rjmp	.+408    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;

				case 5:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	62 e0       	ldi	r22, 0x02	; 2
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	63 e0       	ldi	r22, 0x03	; 3
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	64 e0       	ldi	r22, 0x04	; 4
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	65 e0       	ldi	r22, 0x05	; 5
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	66 e0       	ldi	r22, 0x06	; 6
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	67 e0       	ldi	r22, 0x07	; 7
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1f34:	a3 c0       	rjmp	.+326    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;
				case 6:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	63 e0       	ldi	r22, 0x03	; 3
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	64 e0       	ldi	r22, 0x04	; 4
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	65 e0       	ldi	r22, 0x05	; 5
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	66 e0       	ldi	r22, 0x06	; 6
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	67 e0       	ldi	r22, 0x07	; 7
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1f86:	7a c0       	rjmp	.+244    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;
				case 7:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	62 e0       	ldi	r22, 0x02	; 2
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	63 e0       	ldi	r22, 0x03	; 3
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	64 e0       	ldi	r22, 0x04	; 4
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	65 e0       	ldi	r22, 0x05	; 5
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	66 e0       	ldi	r22, 0x06	; 6
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	67 e0       	ldi	r22, 0x07	; 7
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    1fd8:	51 c0       	rjmp	.+162    	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;
				case 8:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	62 e0       	ldi	r22, 0x02	; 2
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	63 e0       	ldi	r22, 0x03	; 3
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	65 e0       	ldi	r22, 0x05	; 5
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	66 e0       	ldi	r22, 0x06	; 6
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	67 e0       	ldi	r22, 0x07	; 7
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    202a:	28 c0       	rjmp	.+80     	; 0x207c <H_SSD_void_DisplayNumber+0x904>
					break;
				case 9:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	62 e0       	ldi	r22, 0x02	; 2
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	63 e0       	ldi	r22, 0x03	; 3
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	64 e0       	ldi	r22, 0x04	; 4
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	65 e0       	ldi	r22, 0x05	; 5
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	66 e0       	ldi	r22, 0x06	; 6
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	67 e0       	ldi	r22, 0x07	; 7
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>



				}
		//enable digit 2
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	67 e0       	ldi	r22, 0x07	; 7
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e8       	ldi	r26, 0x80	; 128
    208c:	bf e3       	ldi	r27, 0x3F	; 63
    208e:	8b 87       	std	Y+11, r24	; 0x0b
    2090:	9c 87       	std	Y+12, r25	; 0x0c
    2092:	ad 87       	std	Y+13, r26	; 0x0d
    2094:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	48 ec       	ldi	r20, 0xC8	; 200
    20a4:	53 e4       	ldi	r21, 0x43	; 67
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8f 83       	std	Y+7, r24	; 0x07
    20b0:	98 87       	std	Y+8, r25	; 0x08
    20b2:	a9 87       	std	Y+9, r26	; 0x09
    20b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b6:	6f 81       	ldd	r22, Y+7	; 0x07
    20b8:	78 85       	ldd	r23, Y+8	; 0x08
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <H_SSD_void_DisplayNumber+0x960>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <H_SSD_void_DisplayNumber+0x9de>
	else if (__tmp > 65535)
    20d8:	6f 81       	ldd	r22, Y+7	; 0x07
    20da:	78 85       	ldd	r23, Y+8	; 0x08
    20dc:	89 85       	ldd	r24, Y+9	; 0x09
    20de:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	4c f5       	brge	.+82     	; 0x2142 <H_SSD_void_DisplayNumber+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <H_SSD_void_DisplayNumber+0x9c0>
    211a:	88 e2       	ldi	r24, 0x28	; 40
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <H_SSD_void_DisplayNumber+0x9ae>
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <H_SSD_void_DisplayNumber+0x9a2>
    2140:	14 c0       	rjmp	.+40     	; 0x216a <H_SSD_void_DisplayNumber+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <H_SSD_void_DisplayNumber+0x9ea>
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	67 e0       	ldi	r22, 0x07	; 7
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
		return;
	}
	u32 i ;
	u8 units =number % 10;
	u8 tens = number/10;
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    2174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2176:	98 a1       	ldd	r25, Y+32	; 0x20
    2178:	a9 a1       	ldd	r26, Y+33	; 0x21
    217a:	ba a1       	ldd	r27, Y+34	; 0x22
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	a1 1d       	adc	r26, r1
    2180:	b1 1d       	adc	r27, r1
    2182:	8f 8f       	std	Y+31, r24	; 0x1f
    2184:	98 a3       	std	Y+32, r25	; 0x20
    2186:	a9 a3       	std	Y+33, r26	; 0x21
    2188:	ba a3       	std	Y+34, r27	; 0x22
    218a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    218c:	98 a1       	ldd	r25, Y+32	; 0x20
    218e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2190:	ba a1       	ldd	r27, Y+34	; 0x22
    2192:	8a 3f       	cpi	r24, 0xFA	; 250
    2194:	91 05       	cpc	r25, r1
    2196:	a1 05       	cpc	r26, r1
    2198:	b1 05       	cpc	r27, r1
    219a:	08 f4       	brcc	.+2      	; 0x219e <H_SSD_void_DisplayNumber+0xa26>
    219c:	0e cb       	rjmp	.-2532   	; 0x17ba <H_SSD_void_DisplayNumber+0x42>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
	}
}
    219e:	a7 96       	adiw	r28, 0x27	; 39
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <H_PB_void_init>:
#include"PB_int.h"
#include<util/delay.h>


void H_PB_void_init(const PB_t *ptr)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <H_PB_void_init+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinDir(ptr->PB_port, ptr->PB_pin,IN);
    21be:	e9 81       	ldd	r30, Y+1	; 0x01
    21c0:	fa 81       	ldd	r31, Y+2	; 0x02
    21c2:	81 81       	ldd	r24, Z+1	; 0x01
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	92 81       	ldd	r25, Z+2	; 0x02
    21ca:	69 2f       	mov	r22, r25
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <H_PB_void_read>:
void H_PB_void_read(const PB_t *ptr,VALUE_T *pvalue)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	a1 97       	sbiw	r28, 0x21	; 33
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	9f 8f       	std	Y+31, r25	; 0x1f
    21f2:	8e 8f       	std	Y+30, r24	; 0x1e
    21f4:	79 a3       	std	Y+33, r23	; 0x21
    21f6:	68 a3       	std	Y+32, r22	; 0x20
	//u8 read;

	if(ptr -> PB_activeMood == ACTIVE_LOW)
    21f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    21fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    21fc:	83 81       	ldd	r24, Z+3	; 0x03
    21fe:	88 23       	and	r24, r24
    2200:	09 f0       	breq	.+2      	; 0x2204 <H_PB_void_read+0x28>
    2202:	b0 c0       	rjmp	.+352    	; 0x2364 <H_PB_void_read+0x188>
	{
		*pvalue=NOT_PRESSED_ACTIVE_LOW ;
    2204:	e8 a1       	ldd	r30, Y+32	; 0x20
    2206:	f9 a1       	ldd	r31, Y+33	; 0x21
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	80 83       	st	Z, r24
		M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    220c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    220e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2210:	81 81       	ldd	r24, Z+1	; 0x01
    2212:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2214:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2216:	92 81       	ldd	r25, Z+2	; 0x02
    2218:	28 a1       	ldd	r18, Y+32	; 0x20
    221a:	39 a1       	ldd	r19, Y+33	; 0x21
    221c:	69 2f       	mov	r22, r25
    221e:	a9 01       	movw	r20, r18
    2220:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
		if(*pvalue==PRESSED_ACTIVE_LOW){
    2224:	e8 a1       	ldd	r30, Y+32	; 0x20
    2226:	f9 a1       	ldd	r31, Y+33	; 0x21
    2228:	80 81       	ld	r24, Z
    222a:	88 23       	and	r24, r24
    222c:	09 f0       	breq	.+2      	; 0x2230 <H_PB_void_read+0x54>
    222e:	4f c1       	rjmp	.+670    	; 0x24ce <H_PB_void_read+0x2f2>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a8 e4       	ldi	r26, 0x48	; 72
    2236:	b3 e4       	ldi	r27, 0x43	; 67
    2238:	89 8f       	std	Y+25, r24	; 0x19
    223a:	9a 8f       	std	Y+26, r25	; 0x1a
    223c:	ab 8f       	std	Y+27, r26	; 0x1b
    223e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	69 8d       	ldd	r22, Y+25	; 0x19
    2242:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2244:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2246:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	48 ec       	ldi	r20, 0xC8	; 200
    224e:	53 e4       	ldi	r21, 0x43	; 67
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8d 8b       	std	Y+21, r24	; 0x15
    225a:	9e 8b       	std	Y+22, r25	; 0x16
    225c:	af 8b       	std	Y+23, r26	; 0x17
    225e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2274:	88 23       	and	r24, r24
    2276:	2c f4       	brge	.+10     	; 0x2282 <H_PB_void_read+0xa6>
		__ticks = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9c 8b       	std	Y+20, r25	; 0x14
    227e:	8b 8b       	std	Y+19, r24	; 0x13
    2280:	3f c0       	rjmp	.+126    	; 0x2300 <H_PB_void_read+0x124>
	else if (__tmp > 65535)
    2282:	6d 89       	ldd	r22, Y+21	; 0x15
    2284:	7e 89       	ldd	r23, Y+22	; 0x16
    2286:	8f 89       	ldd	r24, Y+23	; 0x17
    2288:	98 8d       	ldd	r25, Y+24	; 0x18
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	4c f5       	brge	.+82     	; 0x22ec <H_PB_void_read+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229a:	69 8d       	ldd	r22, Y+25	; 0x19
    229c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e2       	ldi	r20, 0x20	; 32
    22a8:	51 e4       	ldi	r21, 0x41	; 65
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9c 8b       	std	Y+20, r25	; 0x14
    22c0:	8b 8b       	std	Y+19, r24	; 0x13
    22c2:	0f c0       	rjmp	.+30     	; 0x22e2 <H_PB_void_read+0x106>
    22c4:	88 e2       	ldi	r24, 0x28	; 40
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9a 8b       	std	Y+18, r25	; 0x12
    22ca:	89 8b       	std	Y+17, r24	; 0x11
    22cc:	89 89       	ldd	r24, Y+17	; 0x11
    22ce:	9a 89       	ldd	r25, Y+18	; 0x12
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <H_PB_void_read+0xf4>
    22d4:	9a 8b       	std	Y+18, r25	; 0x12
    22d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9c 8b       	std	Y+20, r25	; 0x14
    22e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	69 f7       	brne	.-38     	; 0x22c4 <H_PB_void_read+0xe8>
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <H_PB_void_read+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ec:	6d 89       	ldd	r22, Y+21	; 0x15
    22ee:	7e 89       	ldd	r23, Y+22	; 0x16
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	98 8b       	std	Y+16, r25	; 0x10
    2306:	8f 87       	std	Y+15, r24	; 0x0f
    2308:	8f 85       	ldd	r24, Y+15	; 0x0f
    230a:	98 89       	ldd	r25, Y+16	; 0x10
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <H_PB_void_read+0x130>
    2310:	98 8b       	std	Y+16, r25	; 0x10
    2312:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
    2314:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2316:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2318:	81 81       	ldd	r24, Z+1	; 0x01
    231a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    231c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    231e:	92 81       	ldd	r25, Z+2	; 0x02
    2320:	28 a1       	ldd	r18, Y+32	; 0x20
    2322:	39 a1       	ldd	r19, Y+33	; 0x21
    2324:	69 2f       	mov	r22, r25
    2326:	a9 01       	movw	r20, r18
    2328:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
			if (*pvalue==PRESSED_ACTIVE_LOW)
    232c:	e8 a1       	ldd	r30, Y+32	; 0x20
    232e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2330:	80 81       	ld	r24, Z
    2332:	88 23       	and	r24, r24
    2334:	09 f0       	breq	.+2      	; 0x2338 <H_PB_void_read+0x15c>
    2336:	cb c0       	rjmp	.+406    	; 0x24ce <H_PB_void_read+0x2f2>
    2338:	0c c0       	rjmp	.+24     	; 0x2352 <H_PB_void_read+0x176>
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    233a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    233c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    233e:	81 81       	ldd	r24, Z+1	; 0x01
    2340:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2342:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2344:	92 81       	ldd	r25, Z+2	; 0x02
    2346:	28 a1       	ldd	r18, Y+32	; 0x20
    2348:	39 a1       	ldd	r19, Y+33	; 0x21
    234a:	69 2f       	mov	r22, r25
    234c:	a9 01       	movw	r20, r18
    234e:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
			if (*pvalue==PRESSED_ACTIVE_LOW)
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
    2352:	e8 a1       	ldd	r30, Y+32	; 0x20
    2354:	f9 a1       	ldd	r31, Y+33	; 0x21
    2356:	80 81       	ld	r24, Z
    2358:	88 23       	and	r24, r24
    235a:	79 f3       	breq	.-34     	; 0x233a <H_PB_void_read+0x15e>
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
				}
				*pvalue=PRESSED_ACTIVE_LOW;
    235c:	e8 a1       	ldd	r30, Y+32	; 0x20
    235e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2360:	10 82       	st	Z, r1
    2362:	b5 c0       	rjmp	.+362    	; 0x24ce <H_PB_void_read+0x2f2>
				return;
			}

		}
	}
	else if(ptr->PB_activeMood==ACTIVE_HIGH)
    2364:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2366:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2368:	83 81       	ldd	r24, Z+3	; 0x03
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	09 f0       	breq	.+2      	; 0x2370 <H_PB_void_read+0x194>
    236e:	af c0       	rjmp	.+350    	; 0x24ce <H_PB_void_read+0x2f2>
	{
		u8 read;

		if(ptr->PB_activeMood==ACTIVE_LOW)
    2370:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2372:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2374:	83 81       	ldd	r24, Z+3	; 0x03
    2376:	88 23       	and	r24, r24
    2378:	09 f0       	breq	.+2      	; 0x237c <H_PB_void_read+0x1a0>
    237a:	a9 c0       	rjmp	.+338    	; 0x24ce <H_PB_void_read+0x2f2>
		{
			read=NOT_PRESSED_ACTIVEHIGH ;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2380:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2382:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2384:	81 81       	ldd	r24, Z+1	; 0x01
    2386:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2388:	ff 8d       	ldd	r31, Y+31	; 0x1f
    238a:	92 81       	ldd	r25, Z+2	; 0x02
    238c:	9e 01       	movw	r18, r28
    238e:	20 5e       	subi	r18, 0xE0	; 224
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	69 2f       	mov	r22, r25
    2394:	a9 01       	movw	r20, r18
    2396:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
			if(read==PRESSED_ACTIVE_LOW){
    239a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239c:	88 23       	and	r24, r24
    239e:	09 f0       	breq	.+2      	; 0x23a2 <H_PB_void_read+0x1c6>
    23a0:	96 c0       	rjmp	.+300    	; 0x24ce <H_PB_void_read+0x2f2>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a8 e4       	ldi	r26, 0x48	; 72
    23a8:	b3 e4       	ldi	r27, 0x43	; 67
    23aa:	8b 87       	std	Y+11, r24	; 0x0b
    23ac:	9c 87       	std	Y+12, r25	; 0x0c
    23ae:	ad 87       	std	Y+13, r26	; 0x0d
    23b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	48 ec       	ldi	r20, 0xC8	; 200
    23c0:	53 e4       	ldi	r21, 0x43	; 67
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8f 83       	std	Y+7, r24	; 0x07
    23cc:	98 87       	std	Y+8, r25	; 0x08
    23ce:	a9 87       	std	Y+9, r26	; 0x09
    23d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d2:	6f 81       	ldd	r22, Y+7	; 0x07
    23d4:	78 85       	ldd	r23, Y+8	; 0x08
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <H_PB_void_read+0x218>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <H_PB_void_read+0x296>
	else if (__tmp > 65535)
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <H_PB_void_read+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6b 85       	ldd	r22, Y+11	; 0x0b
    240e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2410:	8d 85       	ldd	r24, Y+13	; 0x0d
    2412:	9e 85       	ldd	r25, Y+14	; 0x0e
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <H_PB_void_read+0x278>
    2436:	88 e2       	ldi	r24, 0x28	; 40
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <H_PB_void_read+0x266>
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <H_PB_void_read+0x25a>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <H_PB_void_read+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	6f 81       	ldd	r22, Y+7	; 0x07
    2460:	78 85       	ldd	r23, Y+8	; 0x08
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	8d 83       	std	Y+5, r24	; 0x05
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <H_PB_void_read+0x2a2>
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2486:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2488:	ff 8d       	ldd	r31, Y+31	; 0x1f
    248a:	81 81       	ldd	r24, Z+1	; 0x01
    248c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    248e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2490:	92 81       	ldd	r25, Z+2	; 0x02
    2492:	9e 01       	movw	r18, r28
    2494:	20 5e       	subi	r18, 0xE0	; 224
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	69 2f       	mov	r22, r25
    249a:	a9 01       	movw	r20, r18
    249c:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
				if (read==PRESSED_ACTIVE_LOW)
    24a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a2:	88 23       	and	r24, r24
    24a4:	a1 f4       	brne	.+40     	; 0x24ce <H_PB_void_read+0x2f2>
    24a6:	0d c0       	rjmp	.+26     	; 0x24c2 <H_PB_void_read+0x2e6>
				{
					while(read==PRESSED_ACTIVE_LOW)
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    24a8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24aa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24ac:	81 81       	ldd	r24, Z+1	; 0x01
    24ae:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24b0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24b2:	92 81       	ldd	r25, Z+2	; 0x02
    24b4:	9e 01       	movw	r18, r28
    24b6:	20 5e       	subi	r18, 0xE0	; 224
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	69 2f       	mov	r22, r25
    24bc:	a9 01       	movw	r20, r18
    24be:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
				if (read==PRESSED_ACTIVE_LOW)
				{
					while(read==PRESSED_ACTIVE_LOW)
    24c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c4:	88 23       	and	r24, r24
    24c6:	81 f3       	breq	.-32     	; 0x24a8 <H_PB_void_read+0x2cc>
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
					}
					*pvalue=PRESSED_ACTIVE_LOW;
    24c8:	e8 a1       	ldd	r30, Y+32	; 0x20
    24ca:	f9 a1       	ldd	r31, Y+33	; 0x21
    24cc:	10 82       	st	Z, r1
				}

			}
		}
	}
}
    24ce:	a1 96       	adiw	r28, 0x21	; 33
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <H_Led_void_ledInit+0x6>
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	3b 83       	std	Y+3, r19	; 0x03
    24f6:	2a 83       	std	Y+2, r18	; 0x02
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	91 05       	cpc	r25, r1
    2500:	79 f0       	breq	.+30     	; 0x2520 <H_Led_void_ledInit+0x40>
    2502:	2a 81       	ldd	r18, Y+2	; 0x02
    2504:	3b 81       	ldd	r19, Y+3	; 0x03
    2506:	22 30       	cpi	r18, 0x02	; 2
    2508:	31 05       	cpc	r19, r1
    250a:	81 f0       	breq	.+32     	; 0x252c <H_Led_void_ledInit+0x4c>
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	89 f4       	brne	.+34     	; 0x2536 <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
    251e:	0b c0       	rjmp	.+22     	; 0x2536 <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	62 e0       	ldi	r22, 0x02	; 2
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
			break;
	}
}
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <H_Led_void_setON+0x6>
    2548:	0f 92       	push	r0
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	3b 83       	std	Y+3, r19	; 0x03
    2558:	2a 83       	std	Y+2, r18	; 0x02
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	91 05       	cpc	r25, r1
    2562:	79 f0       	breq	.+30     	; 0x2582 <H_Led_void_setON+0x40>
    2564:	2a 81       	ldd	r18, Y+2	; 0x02
    2566:	3b 81       	ldd	r19, Y+3	; 0x03
    2568:	22 30       	cpi	r18, 0x02	; 2
    256a:	31 05       	cpc	r19, r1
    256c:	81 f0       	breq	.+32     	; 0x258e <H_Led_void_setON+0x4c>
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	9b 81       	ldd	r25, Y+3	; 0x03
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	89 f4       	brne	.+34     	; 0x2598 <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    2580:	0b c0       	rjmp	.+22     	; 0x2598 <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
			break;



	}
}
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <H_Led_void_setOFF+0x6>
    25aa:	0f 92       	push	r0
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	3b 83       	std	Y+3, r19	; 0x03
    25ba:	2a 83       	std	Y+2, r18	; 0x02
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	91 05       	cpc	r25, r1
    25c4:	79 f0       	breq	.+30     	; 0x25e4 <H_Led_void_setOFF+0x40>
    25c6:	2a 81       	ldd	r18, Y+2	; 0x02
    25c8:	3b 81       	ldd	r19, Y+3	; 0x03
    25ca:	22 30       	cpi	r18, 0x02	; 2
    25cc:	31 05       	cpc	r19, r1
    25ce:	81 f0       	breq	.+32     	; 0x25f0 <H_Led_void_setOFF+0x4c>
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	89 f4       	brne	.+34     	; 0x25fa <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    25e2:	0b c0       	rjmp	.+22     	; 0x25fa <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    25ee:	05 c0       	rjmp	.+10     	; 0x25fa <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <H_Led_void_toggle+0x6>
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	3b 83       	std	Y+3, r19	; 0x03
    261c:	2a 83       	std	Y+2, r18	; 0x02
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	91 05       	cpc	r25, r1
    2626:	71 f0       	breq	.+28     	; 0x2644 <H_Led_void_toggle+0x3e>
    2628:	2a 81       	ldd	r18, Y+2	; 0x02
    262a:	3b 81       	ldd	r19, Y+3	; 0x03
    262c:	22 30       	cpi	r18, 0x02	; 2
    262e:	31 05       	cpc	r19, r1
    2630:	71 f0       	breq	.+28     	; 0x264e <H_Led_void_toggle+0x48>
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	71 f4       	brne	.+28     	; 0x2656 <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	0e 94 ad 0a 	call	0x155a	; 0x155a <M_DIO_void_TogPinValue>
    2642:	09 c0       	rjmp	.+18     	; 0x2656 <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	0e 94 ad 0a 	call	0x155a	; 0x155a <M_DIO_void_TogPinValue>
    264c:	04 c0       	rjmp	.+8      	; 0x2656 <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	0e 94 ad 0a 	call	0x155a	; 0x155a <M_DIO_void_TogPinValue>

				break;
		}
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <Animation1>:

void Animation1()
{
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	c4 55       	subi	r28, 0x54	; 84
    2670:	d0 40       	sbci	r29, 0x00	; 0
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    2688:	fe 01       	movw	r30, r28
    268a:	ef 5a       	subi	r30, 0xAF	; 175
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	aa ef       	ldi	r26, 0xFA	; 250
    2694:	b3 e4       	ldi	r27, 0x43	; 67
    2696:	80 83       	st	Z, r24
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	a2 83       	std	Z+2, r26	; 0x02
    269c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	8e 01       	movw	r16, r28
    26a0:	03 5b       	subi	r16, 0xB3	; 179
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	fe 01       	movw	r30, r28
    26a6:	ef 5a       	subi	r30, 0xAF	; 175
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	48 ec       	ldi	r20, 0xC8	; 200
    26b8:	53 e4       	ldi	r21, 0x43	; 67
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	80 83       	st	Z, r24
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	a2 83       	std	Z+2, r26	; 0x02
    26ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26cc:	fe 01       	movw	r30, r28
    26ce:	e3 5b       	subi	r30, 0xB3	; 179
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	44 f4       	brge	.+16     	; 0x26fa <Animation1+0x98>
		__ticks = 1;
    26ea:	fe 01       	movw	r30, r28
    26ec:	e5 5b       	subi	r30, 0xB5	; 181
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	64 c0       	rjmp	.+200    	; 0x27c2 <Animation1+0x160>
	else if (__tmp > 65535)
    26fa:	fe 01       	movw	r30, r28
    26fc:	e3 5b       	subi	r30, 0xB3	; 179
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	0c f0       	brlt	.+2      	; 0x271a <Animation1+0xb8>
    2718:	43 c0       	rjmp	.+134    	; 0x27a0 <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	fe 01       	movw	r30, r28
    271c:	ef 5a       	subi	r30, 0xAF	; 175
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8e 01       	movw	r16, r28
    273a:	05 5b       	subi	r16, 0xB5	; 181
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	f8 01       	movw	r30, r16
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
    2750:	1f c0       	rjmp	.+62     	; 0x2790 <Animation1+0x12e>
    2752:	fe 01       	movw	r30, r28
    2754:	e7 5b       	subi	r30, 0xB7	; 183
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	88 e2       	ldi	r24, 0x28	; 40
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	fe 01       	movw	r30, r28
    2762:	e7 5b       	subi	r30, 0xB7	; 183
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <Animation1+0x108>
    276e:	fe 01       	movw	r30, r28
    2770:	e7 5b       	subi	r30, 0xB7	; 183
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	de 01       	movw	r26, r28
    277a:	a5 5b       	subi	r26, 0xB5	; 181
    277c:	bf 4f       	sbci	r27, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	e5 5b       	subi	r30, 0xB5	; 181
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	11 96       	adiw	r26, 0x01	; 1
    278c:	9c 93       	st	X, r25
    278e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	fe 01       	movw	r30, r28
    2792:	e5 5b       	subi	r30, 0xB5	; 181
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	d1 f6       	brne	.-76     	; 0x2752 <Animation1+0xf0>
    279e:	27 c0       	rjmp	.+78     	; 0x27ee <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	8e 01       	movw	r16, r28
    27a2:	05 5b       	subi	r16, 0xB5	; 181
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	fe 01       	movw	r30, r28
    27a8:	e3 5b       	subi	r30, 0xB3	; 179
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	f8 01       	movw	r30, r16
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
    27c2:	de 01       	movw	r26, r28
    27c4:	a9 5b       	subi	r26, 0xB9	; 185
    27c6:	bf 4f       	sbci	r27, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	e5 5b       	subi	r30, 0xB5	; 181
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	8d 93       	st	X+, r24
    27d4:	9c 93       	st	X, r25
    27d6:	fe 01       	movw	r30, r28
    27d8:	e9 5b       	subi	r30, 0xB9	; 185
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <Animation1+0x17e>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e9 5b       	subi	r30, 0xB9	; 185
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    27fa:	fe 01       	movw	r30, r28
    27fc:	ed 5b       	subi	r30, 0xBD	; 189
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	aa ef       	ldi	r26, 0xFA	; 250
    2806:	b3 e4       	ldi	r27, 0x43	; 67
    2808:	80 83       	st	Z, r24
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	a2 83       	std	Z+2, r26	; 0x02
    280e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	8e 01       	movw	r16, r28
    2812:	01 5c       	subi	r16, 0xC1	; 193
    2814:	1f 4f       	sbci	r17, 0xFF	; 255
    2816:	fe 01       	movw	r30, r28
    2818:	ed 5b       	subi	r30, 0xBD	; 189
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	48 ec       	ldi	r20, 0xC8	; 200
    282a:	53 e4       	ldi	r21, 0x43	; 67
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	f8 01       	movw	r30, r16
    2836:	80 83       	st	Z, r24
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	a2 83       	std	Z+2, r26	; 0x02
    283c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    283e:	fe 01       	movw	r30, r28
    2840:	ff 96       	adiw	r30, 0x3f	; 63
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <Animation1+0x202>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9e af       	std	Y+62, r25	; 0x3e
    2860:	8d af       	std	Y+61, r24	; 0x3d
    2862:	46 c0       	rjmp	.+140    	; 0x28f0 <Animation1+0x28e>
	else if (__tmp > 65535)
    2864:	fe 01       	movw	r30, r28
    2866:	ff 96       	adiw	r30, 0x3f	; 63
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	64 f5       	brge	.+88     	; 0x28d8 <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	fe 01       	movw	r30, r28
    2882:	ed 5b       	subi	r30, 0xBD	; 189
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e af       	std	Y+62, r25	; 0x3e
    28ac:	8d af       	std	Y+61, r24	; 0x3d
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <Animation1+0x26c>
    28b0:	88 e2       	ldi	r24, 0x28	; 40
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c af       	std	Y+60, r25	; 0x3c
    28b6:	8b af       	std	Y+59, r24	; 0x3b
    28b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <Animation1+0x25a>
    28c0:	9c af       	std	Y+60, r25	; 0x3c
    28c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e af       	std	Y+62, r25	; 0x3e
    28cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <Animation1+0x24e>
    28d6:	16 c0       	rjmp	.+44     	; 0x2904 <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	fe 01       	movw	r30, r28
    28da:	ff 96       	adiw	r30, 0x3f	; 63
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9e af       	std	Y+62, r25	; 0x3e
    28ee:	8d af       	std	Y+61, r24	; 0x3d
    28f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28f4:	9a af       	std	Y+58, r25	; 0x3a
    28f6:	89 af       	std	Y+57, r24	; 0x39
    28f8:	89 ad       	ldd	r24, Y+57	; 0x39
    28fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <Animation1+0x29a>
    2900:	9a af       	std	Y+58, r25	; 0x3a
    2902:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	aa ef       	ldi	r26, 0xFA	; 250
    2916:	b3 e4       	ldi	r27, 0x43	; 67
    2918:	8d ab       	std	Y+53, r24	; 0x35
    291a:	9e ab       	std	Y+54, r25	; 0x36
    291c:	af ab       	std	Y+55, r26	; 0x37
    291e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2920:	6d a9       	ldd	r22, Y+53	; 0x35
    2922:	7e a9       	ldd	r23, Y+54	; 0x36
    2924:	8f a9       	ldd	r24, Y+55	; 0x37
    2926:	98 ad       	ldd	r25, Y+56	; 0x38
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	48 ec       	ldi	r20, 0xC8	; 200
    292e:	53 e4       	ldi	r21, 0x43	; 67
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	89 ab       	std	Y+49, r24	; 0x31
    293a:	9a ab       	std	Y+50, r25	; 0x32
    293c:	ab ab       	std	Y+51, r26	; 0x33
    293e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2940:	69 a9       	ldd	r22, Y+49	; 0x31
    2942:	7a a9       	ldd	r23, Y+50	; 0x32
    2944:	8b a9       	ldd	r24, Y+51	; 0x33
    2946:	9c a9       	ldd	r25, Y+52	; 0x34
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	2c f4       	brge	.+10     	; 0x2962 <Animation1+0x300>
		__ticks = 1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	98 ab       	std	Y+48, r25	; 0x30
    295e:	8f a7       	std	Y+47, r24	; 0x2f
    2960:	3f c0       	rjmp	.+126    	; 0x29e0 <Animation1+0x37e>
	else if (__tmp > 65535)
    2962:	69 a9       	ldd	r22, Y+49	; 0x31
    2964:	7a a9       	ldd	r23, Y+50	; 0x32
    2966:	8b a9       	ldd	r24, Y+51	; 0x33
    2968:	9c a9       	ldd	r25, Y+52	; 0x34
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	3f ef       	ldi	r19, 0xFF	; 255
    296e:	4f e7       	ldi	r20, 0x7F	; 127
    2970:	57 e4       	ldi	r21, 0x47	; 71
    2972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2976:	18 16       	cp	r1, r24
    2978:	4c f5       	brge	.+82     	; 0x29cc <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297a:	6d a9       	ldd	r22, Y+53	; 0x35
    297c:	7e a9       	ldd	r23, Y+54	; 0x36
    297e:	8f a9       	ldd	r24, Y+55	; 0x37
    2980:	98 ad       	ldd	r25, Y+56	; 0x38
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	98 ab       	std	Y+48, r25	; 0x30
    29a0:	8f a7       	std	Y+47, r24	; 0x2f
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <Animation1+0x360>
    29a4:	88 e2       	ldi	r24, 0x28	; 40
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9e a7       	std	Y+46, r25	; 0x2e
    29aa:	8d a7       	std	Y+45, r24	; 0x2d
    29ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    29ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <Animation1+0x34e>
    29b4:	9e a7       	std	Y+46, r25	; 0x2e
    29b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ba:	98 a9       	ldd	r25, Y+48	; 0x30
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	98 ab       	std	Y+48, r25	; 0x30
    29c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c4:	98 a9       	ldd	r25, Y+48	; 0x30
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	69 f7       	brne	.-38     	; 0x29a4 <Animation1+0x342>
    29ca:	14 c0       	rjmp	.+40     	; 0x29f4 <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29cc:	69 a9       	ldd	r22, Y+49	; 0x31
    29ce:	7a a9       	ldd	r23, Y+50	; 0x32
    29d0:	8b a9       	ldd	r24, Y+51	; 0x33
    29d2:	9c a9       	ldd	r25, Y+52	; 0x34
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	98 ab       	std	Y+48, r25	; 0x30
    29de:	8f a7       	std	Y+47, r24	; 0x2f
    29e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e2:	98 a9       	ldd	r25, Y+48	; 0x30
    29e4:	9c a7       	std	Y+44, r25	; 0x2c
    29e6:	8b a7       	std	Y+43, r24	; 0x2b
    29e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <Animation1+0x38a>
    29f0:	9c a7       	std	Y+44, r25	; 0x2c
    29f2:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	aa ef       	ldi	r26, 0xFA	; 250
    2a06:	b3 e4       	ldi	r27, 0x43	; 67
    2a08:	8f a3       	std	Y+39, r24	; 0x27
    2a0a:	98 a7       	std	Y+40, r25	; 0x28
    2a0c:	a9 a7       	std	Y+41, r26	; 0x29
    2a0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6f a1       	ldd	r22, Y+39	; 0x27
    2a12:	78 a5       	ldd	r23, Y+40	; 0x28
    2a14:	89 a5       	ldd	r24, Y+41	; 0x29
    2a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	48 ec       	ldi	r20, 0xC8	; 200
    2a1e:	53 e4       	ldi	r21, 0x43	; 67
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8b a3       	std	Y+35, r24	; 0x23
    2a2a:	9c a3       	std	Y+36, r25	; 0x24
    2a2c:	ad a3       	std	Y+37, r26	; 0x25
    2a2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a30:	6b a1       	ldd	r22, Y+35	; 0x23
    2a32:	7c a1       	ldd	r23, Y+36	; 0x24
    2a34:	8d a1       	ldd	r24, Y+37	; 0x25
    2a36:	9e a1       	ldd	r25, Y+38	; 0x26
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <Animation1+0x3f0>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <Animation1+0x46e>
	else if (__tmp > 65535)
    2a52:	6b a1       	ldd	r22, Y+35	; 0x23
    2a54:	7c a1       	ldd	r23, Y+36	; 0x24
    2a56:	8d a1       	ldd	r24, Y+37	; 0x25
    2a58:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <Animation1+0x450>
    2a94:	88 e2       	ldi	r24, 0x28	; 40
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	98 a3       	std	Y+32, r25	; 0x20
    2a9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <Animation1+0x43e>
    2aa4:	98 a3       	std	Y+32, r25	; 0x20
    2aa6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9a a3       	std	Y+34, r25	; 0x22
    2ab0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <Animation1+0x432>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6b a1       	ldd	r22, Y+35	; 0x23
    2abe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9a a3       	std	Y+34, r25	; 0x22
    2ace:	89 a3       	std	Y+33, r24	; 0x21
    2ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ada:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <Animation1+0x47a>
    2ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	aa ef       	ldi	r26, 0xFA	; 250
    2af6:	b3 e4       	ldi	r27, 0x43	; 67
    2af8:	89 8f       	std	Y+25, r24	; 0x19
    2afa:	9a 8f       	std	Y+26, r25	; 0x1a
    2afc:	ab 8f       	std	Y+27, r26	; 0x1b
    2afe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b00:	69 8d       	ldd	r22, Y+25	; 0x19
    2b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	48 ec       	ldi	r20, 0xC8	; 200
    2b0e:	53 e4       	ldi	r21, 0x43	; 67
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	8d 8b       	std	Y+21, r24	; 0x15
    2b1a:	9e 8b       	std	Y+22, r25	; 0x16
    2b1c:	af 8b       	std	Y+23, r26	; 0x17
    2b1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b20:	6d 89       	ldd	r22, Y+21	; 0x15
    2b22:	7e 89       	ldd	r23, Y+22	; 0x16
    2b24:	8f 89       	ldd	r24, Y+23	; 0x17
    2b26:	98 8d       	ldd	r25, Y+24	; 0x18
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <Animation1+0x4e0>
		__ticks = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9c 8b       	std	Y+20, r25	; 0x14
    2b3e:	8b 8b       	std	Y+19, r24	; 0x13
    2b40:	3f c0       	rjmp	.+126    	; 0x2bc0 <Animation1+0x55e>
	else if (__tmp > 65535)
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	4c f5       	brge	.+82     	; 0x2bac <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <Animation1+0x540>
    2b84:	88 e2       	ldi	r24, 0x28	; 40
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9a 8b       	std	Y+18, r25	; 0x12
    2b8a:	89 8b       	std	Y+17, r24	; 0x11
    2b8c:	89 89       	ldd	r24, Y+17	; 0x11
    2b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <Animation1+0x52e>
    2b94:	9a 8b       	std	Y+18, r25	; 0x12
    2b96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ba0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <Animation1+0x522>
    2baa:	14 c0       	rjmp	.+40     	; 0x2bd4 <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	6d 89       	ldd	r22, Y+21	; 0x15
    2bae:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9c 8b       	std	Y+20, r25	; 0x14
    2bbe:	8b 8b       	std	Y+19, r24	; 0x13
    2bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc4:	98 8b       	std	Y+16, r25	; 0x10
    2bc6:	8f 87       	std	Y+15, r24	; 0x0f
    2bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bca:	98 89       	ldd	r25, Y+16	; 0x10
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <Animation1+0x56a>
    2bd0:	98 8b       	std	Y+16, r25	; 0x10
    2bd2:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	aa ef       	ldi	r26, 0xFA	; 250
    2be6:	b3 e4       	ldi	r27, 0x43	; 67
    2be8:	8b 87       	std	Y+11, r24	; 0x0b
    2bea:	9c 87       	std	Y+12, r25	; 0x0c
    2bec:	ad 87       	std	Y+13, r26	; 0x0d
    2bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	48 ec       	ldi	r20, 0xC8	; 200
    2bfe:	53 e4       	ldi	r21, 0x43	; 67
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8f 83       	std	Y+7, r24	; 0x07
    2c0a:	98 87       	std	Y+8, r25	; 0x08
    2c0c:	a9 87       	std	Y+9, r26	; 0x09
    2c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c10:	6f 81       	ldd	r22, Y+7	; 0x07
    2c12:	78 85       	ldd	r23, Y+8	; 0x08
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	2c f4       	brge	.+10     	; 0x2c32 <Animation1+0x5d0>
		__ticks = 1;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
    2c30:	3f c0       	rjmp	.+126    	; 0x2cb0 <Animation1+0x64e>
	else if (__tmp > 65535)
    2c32:	6f 81       	ldd	r22, Y+7	; 0x07
    2c34:	78 85       	ldd	r23, Y+8	; 0x08
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	3f ef       	ldi	r19, 0xFF	; 255
    2c3e:	4f e7       	ldi	r20, 0x7F	; 127
    2c40:	57 e4       	ldi	r21, 0x47	; 71
    2c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c46:	18 16       	cp	r1, r24
    2c48:	4c f5       	brge	.+82     	; 0x2c9c <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e2       	ldi	r20, 0x20	; 32
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	0f c0       	rjmp	.+30     	; 0x2c92 <Animation1+0x630>
    2c74:	88 e2       	ldi	r24, 0x28	; 40
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9c 83       	std	Y+4, r25	; 0x04
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <Animation1+0x61e>
    2c84:	9c 83       	std	Y+4, r25	; 0x04
    2c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c88:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	69 f7       	brne	.-38     	; 0x2c74 <Animation1+0x612>
    2c9a:	14 c0       	rjmp	.+40     	; 0x2cc4 <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb4:	9a 83       	std	Y+2, r25	; 0x02
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <Animation1+0x65a>
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    2cc4:	cc 5a       	subi	r28, 0xAC	; 172
    2cc6:	df 4f       	sbci	r29, 0xFF	; 255
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <Animation2>:
void Animation2()
{
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	c4 55       	subi	r28, 0x54	; 84
    2cea:	d0 40       	sbci	r29, 0x00	; 0
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ef 5a       	subi	r30, 0xAF	; 175
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	aa ef       	ldi	r26, 0xFA	; 250
    2d08:	b3 e4       	ldi	r27, 0x43	; 67
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	8e 01       	movw	r16, r28
    2d14:	03 5b       	subi	r16, 0xB3	; 179
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ef 5a       	subi	r30, 0xAF	; 175
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	48 ec       	ldi	r20, 0xC8	; 200
    2d2c:	53 e4       	ldi	r21, 0x43	; 67
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	a2 83       	std	Z+2, r26	; 0x02
    2d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d40:	fe 01       	movw	r30, r28
    2d42:	e3 5b       	subi	r30, 0xB3	; 179
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e8       	ldi	r20, 0x80	; 128
    2d54:	5f e3       	ldi	r21, 0x3F	; 63
    2d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d5a:	88 23       	and	r24, r24
    2d5c:	44 f4       	brge	.+16     	; 0x2d6e <Animation2+0x92>
		__ticks = 1;
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e5 5b       	subi	r30, 0xB5	; 181
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
    2d6c:	64 c0       	rjmp	.+200    	; 0x2e36 <Animation2+0x15a>
	else if (__tmp > 65535)
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e3 5b       	subi	r30, 0xB3	; 179
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	57 e4       	ldi	r21, 0x47	; 71
    2d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	0c f0       	brlt	.+2      	; 0x2d8e <Animation2+0xb2>
    2d8c:	43 c0       	rjmp	.+134    	; 0x2e14 <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 5a       	subi	r30, 0xAF	; 175
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e2       	ldi	r20, 0x20	; 32
    2da2:	51 e4       	ldi	r21, 0x41	; 65
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8e 01       	movw	r16, r28
    2dae:	05 5b       	subi	r16, 0xB5	; 181
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
    2dc4:	1f c0       	rjmp	.+62     	; 0x2e04 <Animation2+0x128>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e7 5b       	subi	r30, 0xB7	; 183
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	88 e2       	ldi	r24, 0x28	; 40
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e7 5b       	subi	r30, 0xB7	; 183
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <Animation2+0x102>
    2de2:	fe 01       	movw	r30, r28
    2de4:	e7 5b       	subi	r30, 0xB7	; 183
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dec:	de 01       	movw	r26, r28
    2dee:	a5 5b       	subi	r26, 0xB5	; 181
    2df0:	bf 4f       	sbci	r27, 0xFF	; 255
    2df2:	fe 01       	movw	r30, r28
    2df4:	e5 5b       	subi	r30, 0xB5	; 181
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	9c 93       	st	X, r25
    2e02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e04:	fe 01       	movw	r30, r28
    2e06:	e5 5b       	subi	r30, 0xB5	; 181
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	d1 f6       	brne	.-76     	; 0x2dc6 <Animation2+0xea>
    2e12:	27 c0       	rjmp	.+78     	; 0x2e62 <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	8e 01       	movw	r16, r28
    2e16:	05 5b       	subi	r16, 0xB5	; 181
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e3 5b       	subi	r30, 0xB3	; 179
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
    2e36:	de 01       	movw	r26, r28
    2e38:	a9 5b       	subi	r26, 0xB9	; 185
    2e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e5 5b       	subi	r30, 0xB5	; 181
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	91 81       	ldd	r25, Z+1	; 0x01
    2e46:	8d 93       	st	X+, r24
    2e48:	9c 93       	st	X, r25
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e9 5b       	subi	r30, 0xB9	; 185
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <Animation2+0x178>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e9 5b       	subi	r30, 0xB9	; 185
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ed 5b       	subi	r30, 0xBD	; 189
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	aa ef       	ldi	r26, 0xFA	; 250
    2e74:	b3 e4       	ldi	r27, 0x43	; 67
    2e76:	80 83       	st	Z, r24
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	a2 83       	std	Z+2, r26	; 0x02
    2e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	8e 01       	movw	r16, r28
    2e80:	01 5c       	subi	r16, 0xC1	; 193
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	ed 5b       	subi	r30, 0xBD	; 189
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	48 ec       	ldi	r20, 0xC8	; 200
    2e98:	53 e4       	ldi	r21, 0x43	; 67
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	80 83       	st	Z, r24
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	a2 83       	std	Z+2, r26	; 0x02
    2eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eac:	fe 01       	movw	r30, r28
    2eae:	ff 96       	adiw	r30, 0x3f	; 63
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e8       	ldi	r20, 0x80	; 128
    2ebe:	5f e3       	ldi	r21, 0x3F	; 63
    2ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec4:	88 23       	and	r24, r24
    2ec6:	2c f4       	brge	.+10     	; 0x2ed2 <Animation2+0x1f6>
		__ticks = 1;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9e af       	std	Y+62, r25	; 0x3e
    2ece:	8d af       	std	Y+61, r24	; 0x3d
    2ed0:	46 c0       	rjmp	.+140    	; 0x2f5e <Animation2+0x282>
	else if (__tmp > 65535)
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ff 96       	adiw	r30, 0x3f	; 63
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	64 f5       	brge	.+88     	; 0x2f46 <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ed 5b       	subi	r30, 0xBD	; 189
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e af       	std	Y+62, r25	; 0x3e
    2f1a:	8d af       	std	Y+61, r24	; 0x3d
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <Animation2+0x260>
    2f1e:	88 e2       	ldi	r24, 0x28	; 40
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c af       	std	Y+60, r25	; 0x3c
    2f24:	8b af       	std	Y+59, r24	; 0x3b
    2f26:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f28:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <Animation2+0x24e>
    2f2e:	9c af       	std	Y+60, r25	; 0x3c
    2f30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e af       	std	Y+62, r25	; 0x3e
    2f3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <Animation2+0x242>
    2f44:	16 c0       	rjmp	.+44     	; 0x2f72 <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	fe 01       	movw	r30, r28
    2f48:	ff 96       	adiw	r30, 0x3f	; 63
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9e af       	std	Y+62, r25	; 0x3e
    2f5c:	8d af       	std	Y+61, r24	; 0x3d
    2f5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f62:	9a af       	std	Y+58, r25	; 0x3a
    2f64:	89 af       	std	Y+57, r24	; 0x39
    2f66:	89 ad       	ldd	r24, Y+57	; 0x39
    2f68:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <Animation2+0x28e>
    2f6e:	9a af       	std	Y+58, r25	; 0x3a
    2f70:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	aa ef       	ldi	r26, 0xFA	; 250
    2f7e:	b3 e4       	ldi	r27, 0x43	; 67
    2f80:	8d ab       	std	Y+53, r24	; 0x35
    2f82:	9e ab       	std	Y+54, r25	; 0x36
    2f84:	af ab       	std	Y+55, r26	; 0x37
    2f86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f88:	6d a9       	ldd	r22, Y+53	; 0x35
    2f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	48 ec       	ldi	r20, 0xC8	; 200
    2f96:	53 e4       	ldi	r21, 0x43	; 67
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	89 ab       	std	Y+49, r24	; 0x31
    2fa2:	9a ab       	std	Y+50, r25	; 0x32
    2fa4:	ab ab       	std	Y+51, r26	; 0x33
    2fa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    2faa:	7a a9       	ldd	r23, Y+50	; 0x32
    2fac:	8b a9       	ldd	r24, Y+51	; 0x33
    2fae:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e8       	ldi	r20, 0x80	; 128
    2fb6:	5f e3       	ldi	r21, 0x3F	; 63
    2fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fbc:	88 23       	and	r24, r24
    2fbe:	2c f4       	brge	.+10     	; 0x2fca <Animation2+0x2ee>
		__ticks = 1;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	98 ab       	std	Y+48, r25	; 0x30
    2fc6:	8f a7       	std	Y+47, r24	; 0x2f
    2fc8:	3f c0       	rjmp	.+126    	; 0x3048 <Animation2+0x36c>
	else if (__tmp > 65535)
    2fca:	69 a9       	ldd	r22, Y+49	; 0x31
    2fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fce:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	57 e4       	ldi	r21, 0x47	; 71
    2fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fde:	18 16       	cp	r1, r24
    2fe0:	4c f5       	brge	.+82     	; 0x3034 <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe2:	6d a9       	ldd	r22, Y+53	; 0x35
    2fe4:	7e a9       	ldd	r23, Y+54	; 0x36
    2fe6:	8f a9       	ldd	r24, Y+55	; 0x37
    2fe8:	98 ad       	ldd	r25, Y+56	; 0x38
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e2       	ldi	r20, 0x20	; 32
    2ff0:	51 e4       	ldi	r21, 0x41	; 65
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	98 ab       	std	Y+48, r25	; 0x30
    3008:	8f a7       	std	Y+47, r24	; 0x2f
    300a:	0f c0       	rjmp	.+30     	; 0x302a <Animation2+0x34e>
    300c:	88 e2       	ldi	r24, 0x28	; 40
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9e a7       	std	Y+46, r25	; 0x2e
    3012:	8d a7       	std	Y+45, r24	; 0x2d
    3014:	8d a5       	ldd	r24, Y+45	; 0x2d
    3016:	9e a5       	ldd	r25, Y+46	; 0x2e
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <Animation2+0x33c>
    301c:	9e a7       	std	Y+46, r25	; 0x2e
    301e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	8f a5       	ldd	r24, Y+47	; 0x2f
    3022:	98 a9       	ldd	r25, Y+48	; 0x30
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	98 ab       	std	Y+48, r25	; 0x30
    3028:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302a:	8f a5       	ldd	r24, Y+47	; 0x2f
    302c:	98 a9       	ldd	r25, Y+48	; 0x30
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	69 f7       	brne	.-38     	; 0x300c <Animation2+0x330>
    3032:	14 c0       	rjmp	.+40     	; 0x305c <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3034:	69 a9       	ldd	r22, Y+49	; 0x31
    3036:	7a a9       	ldd	r23, Y+50	; 0x32
    3038:	8b a9       	ldd	r24, Y+51	; 0x33
    303a:	9c a9       	ldd	r25, Y+52	; 0x34
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	98 ab       	std	Y+48, r25	; 0x30
    3046:	8f a7       	std	Y+47, r24	; 0x2f
    3048:	8f a5       	ldd	r24, Y+47	; 0x2f
    304a:	98 a9       	ldd	r25, Y+48	; 0x30
    304c:	9c a7       	std	Y+44, r25	; 0x2c
    304e:	8b a7       	std	Y+43, r24	; 0x2b
    3050:	8b a5       	ldd	r24, Y+43	; 0x2b
    3052:	9c a5       	ldd	r25, Y+44	; 0x2c
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <Animation2+0x378>
    3058:	9c a7       	std	Y+44, r25	; 0x2c
    305a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    305c:	82 e0       	ldi	r24, 0x02	; 2
    305e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	aa ef       	ldi	r26, 0xFA	; 250
    3068:	b3 e4       	ldi	r27, 0x43	; 67
    306a:	8f a3       	std	Y+39, r24	; 0x27
    306c:	98 a7       	std	Y+40, r25	; 0x28
    306e:	a9 a7       	std	Y+41, r26	; 0x29
    3070:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3072:	6f a1       	ldd	r22, Y+39	; 0x27
    3074:	78 a5       	ldd	r23, Y+40	; 0x28
    3076:	89 a5       	ldd	r24, Y+41	; 0x29
    3078:	9a a5       	ldd	r25, Y+42	; 0x2a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	48 ec       	ldi	r20, 0xC8	; 200
    3080:	53 e4       	ldi	r21, 0x43	; 67
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	8b a3       	std	Y+35, r24	; 0x23
    308c:	9c a3       	std	Y+36, r25	; 0x24
    308e:	ad a3       	std	Y+37, r26	; 0x25
    3090:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3092:	6b a1       	ldd	r22, Y+35	; 0x23
    3094:	7c a1       	ldd	r23, Y+36	; 0x24
    3096:	8d a1       	ldd	r24, Y+37	; 0x25
    3098:	9e a1       	ldd	r25, Y+38	; 0x26
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <Animation2+0x3d8>
		__ticks = 1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9a a3       	std	Y+34, r25	; 0x22
    30b0:	89 a3       	std	Y+33, r24	; 0x21
    30b2:	3f c0       	rjmp	.+126    	; 0x3132 <Animation2+0x456>
	else if (__tmp > 65535)
    30b4:	6b a1       	ldd	r22, Y+35	; 0x23
    30b6:	7c a1       	ldd	r23, Y+36	; 0x24
    30b8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ba:	9e a1       	ldd	r25, Y+38	; 0x26
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	3f ef       	ldi	r19, 0xFF	; 255
    30c0:	4f e7       	ldi	r20, 0x7F	; 127
    30c2:	57 e4       	ldi	r21, 0x47	; 71
    30c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	4c f5       	brge	.+82     	; 0x311e <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30cc:	6f a1       	ldd	r22, Y+39	; 0x27
    30ce:	78 a5       	ldd	r23, Y+40	; 0x28
    30d0:	89 a5       	ldd	r24, Y+41	; 0x29
    30d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9a a3       	std	Y+34, r25	; 0x22
    30f2:	89 a3       	std	Y+33, r24	; 0x21
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <Animation2+0x438>
    30f6:	88 e2       	ldi	r24, 0x28	; 40
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	98 a3       	std	Y+32, r25	; 0x20
    30fc:	8f 8f       	std	Y+31, r24	; 0x1f
    30fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3100:	98 a1       	ldd	r25, Y+32	; 0x20
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <Animation2+0x426>
    3106:	98 a3       	std	Y+32, r25	; 0x20
    3108:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310a:	89 a1       	ldd	r24, Y+33	; 0x21
    310c:	9a a1       	ldd	r25, Y+34	; 0x22
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	9a a3       	std	Y+34, r25	; 0x22
    3112:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	89 a1       	ldd	r24, Y+33	; 0x21
    3116:	9a a1       	ldd	r25, Y+34	; 0x22
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	69 f7       	brne	.-38     	; 0x30f6 <Animation2+0x41a>
    311c:	14 c0       	rjmp	.+40     	; 0x3146 <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311e:	6b a1       	ldd	r22, Y+35	; 0x23
    3120:	7c a1       	ldd	r23, Y+36	; 0x24
    3122:	8d a1       	ldd	r24, Y+37	; 0x25
    3124:	9e a1       	ldd	r25, Y+38	; 0x26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9a a3       	std	Y+34, r25	; 0x22
    3130:	89 a3       	std	Y+33, r24	; 0x21
    3132:	89 a1       	ldd	r24, Y+33	; 0x21
    3134:	9a a1       	ldd	r25, Y+34	; 0x22
    3136:	9e 8f       	std	Y+30, r25	; 0x1e
    3138:	8d 8f       	std	Y+29, r24	; 0x1d
    313a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    313c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <Animation2+0x462>
    3142:	9e 8f       	std	Y+30, r25	; 0x1e
    3144:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	aa ef       	ldi	r26, 0xFA	; 250
    3152:	b3 e4       	ldi	r27, 0x43	; 67
    3154:	89 8f       	std	Y+25, r24	; 0x19
    3156:	9a 8f       	std	Y+26, r25	; 0x1a
    3158:	ab 8f       	std	Y+27, r26	; 0x1b
    315a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	69 8d       	ldd	r22, Y+25	; 0x19
    315e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	48 ec       	ldi	r20, 0xC8	; 200
    316a:	53 e4       	ldi	r21, 0x43	; 67
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8d 8b       	std	Y+21, r24	; 0x15
    3176:	9e 8b       	std	Y+22, r25	; 0x16
    3178:	af 8b       	std	Y+23, r26	; 0x17
    317a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    317c:	6d 89       	ldd	r22, Y+21	; 0x15
    317e:	7e 89       	ldd	r23, Y+22	; 0x16
    3180:	8f 89       	ldd	r24, Y+23	; 0x17
    3182:	98 8d       	ldd	r25, Y+24	; 0x18
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <Animation2+0x4c2>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9c 8b       	std	Y+20, r25	; 0x14
    319a:	8b 8b       	std	Y+19, r24	; 0x13
    319c:	3f c0       	rjmp	.+126    	; 0x321c <Animation2+0x540>
	else if (__tmp > 65535)
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	69 8d       	ldd	r22, Y+25	; 0x19
    31b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9c 8b       	std	Y+20, r25	; 0x14
    31dc:	8b 8b       	std	Y+19, r24	; 0x13
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <Animation2+0x522>
    31e0:	88 e2       	ldi	r24, 0x28	; 40
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9a 8b       	std	Y+18, r25	; 0x12
    31e6:	89 8b       	std	Y+17, r24	; 0x11
    31e8:	89 89       	ldd	r24, Y+17	; 0x11
    31ea:	9a 89       	ldd	r25, Y+18	; 0x12
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <Animation2+0x510>
    31f0:	9a 8b       	std	Y+18, r25	; 0x12
    31f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8b 89       	ldd	r24, Y+19	; 0x13
    31f6:	9c 89       	ldd	r25, Y+20	; 0x14
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9c 8b       	std	Y+20, r25	; 0x14
    31fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3200:	9c 89       	ldd	r25, Y+20	; 0x14
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <Animation2+0x504>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6d 89       	ldd	r22, Y+21	; 0x15
    320a:	7e 89       	ldd	r23, Y+22	; 0x16
    320c:	8f 89       	ldd	r24, Y+23	; 0x17
    320e:	98 8d       	ldd	r25, Y+24	; 0x18
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9c 8b       	std	Y+20, r25	; 0x14
    321a:	8b 8b       	std	Y+19, r24	; 0x13
    321c:	8b 89       	ldd	r24, Y+19	; 0x13
    321e:	9c 89       	ldd	r25, Y+20	; 0x14
    3220:	98 8b       	std	Y+16, r25	; 0x10
    3222:	8f 87       	std	Y+15, r24	; 0x0f
    3224:	8f 85       	ldd	r24, Y+15	; 0x0f
    3226:	98 89       	ldd	r25, Y+16	; 0x10
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <Animation2+0x54c>
    322c:	98 8b       	std	Y+16, r25	; 0x10
    322e:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	aa ef       	ldi	r26, 0xFA	; 250
    323c:	b3 e4       	ldi	r27, 0x43	; 67
    323e:	8b 87       	std	Y+11, r24	; 0x0b
    3240:	9c 87       	std	Y+12, r25	; 0x0c
    3242:	ad 87       	std	Y+13, r26	; 0x0d
    3244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	6b 85       	ldd	r22, Y+11	; 0x0b
    3248:	7c 85       	ldd	r23, Y+12	; 0x0c
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	48 ec       	ldi	r20, 0xC8	; 200
    3254:	53 e4       	ldi	r21, 0x43	; 67
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8f 83       	std	Y+7, r24	; 0x07
    3260:	98 87       	std	Y+8, r25	; 0x08
    3262:	a9 87       	std	Y+9, r26	; 0x09
    3264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3266:	6f 81       	ldd	r22, Y+7	; 0x07
    3268:	78 85       	ldd	r23, Y+8	; 0x08
    326a:	89 85       	ldd	r24, Y+9	; 0x09
    326c:	9a 85       	ldd	r25, Y+10	; 0x0a
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <Animation2+0x5ac>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <Animation2+0x62a>
	else if (__tmp > 65535)
    3288:	6f 81       	ldd	r22, Y+7	; 0x07
    328a:	78 85       	ldd	r23, Y+8	; 0x08
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <Animation2+0x60c>
    32ca:	88 e2       	ldi	r24, 0x28	; 40
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9c 83       	std	Y+4, r25	; 0x04
    32d0:	8b 83       	std	Y+3, r24	; 0x03
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <Animation2+0x5fa>
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	9e 81       	ldd	r25, Y+6	; 0x06
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <Animation2+0x5ee>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6f 81       	ldd	r22, Y+7	; 0x07
    32f4:	78 85       	ldd	r23, Y+8	; 0x08
    32f6:	89 85       	ldd	r24, Y+9	; 0x09
    32f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <Animation2+0x636>
    3316:	9a 83       	std	Y+2, r25	; 0x02
    3318:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    331a:	cc 5a       	subi	r28, 0xAC	; 172
    331c:	df 4f       	sbci	r29, 0xFF	; 255
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	1f 91       	pop	r17
    332e:	0f 91       	pop	r16
    3330:	08 95       	ret

00003332 <Animation3>:
void Animation3()
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	6c 97       	sbiw	r28, 0x1c	; 28
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	0e 94 a1 12 	call	0x2542	; 0x2542 <H_Led_void_setON>
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	aa ef       	ldi	r26, 0xFA	; 250
    335e:	b3 e4       	ldi	r27, 0x43	; 67
    3360:	89 8f       	std	Y+25, r24	; 0x19
    3362:	9a 8f       	std	Y+26, r25	; 0x1a
    3364:	ab 8f       	std	Y+27, r26	; 0x1b
    3366:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3368:	69 8d       	ldd	r22, Y+25	; 0x19
    336a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    336c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	48 ec       	ldi	r20, 0xC8	; 200
    3376:	53 e4       	ldi	r21, 0x43	; 67
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	8d 8b       	std	Y+21, r24	; 0x15
    3382:	9e 8b       	std	Y+22, r25	; 0x16
    3384:	af 8b       	std	Y+23, r26	; 0x17
    3386:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3388:	6d 89       	ldd	r22, Y+21	; 0x15
    338a:	7e 89       	ldd	r23, Y+22	; 0x16
    338c:	8f 89       	ldd	r24, Y+23	; 0x17
    338e:	98 8d       	ldd	r25, Y+24	; 0x18
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e8       	ldi	r20, 0x80	; 128
    3396:	5f e3       	ldi	r21, 0x3F	; 63
    3398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    339c:	88 23       	and	r24, r24
    339e:	2c f4       	brge	.+10     	; 0x33aa <Animation3+0x78>
		__ticks = 1;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9c 8b       	std	Y+20, r25	; 0x14
    33a6:	8b 8b       	std	Y+19, r24	; 0x13
    33a8:	3f c0       	rjmp	.+126    	; 0x3428 <Animation3+0xf6>
	else if (__tmp > 65535)
    33aa:	6d 89       	ldd	r22, Y+21	; 0x15
    33ac:	7e 89       	ldd	r23, Y+22	; 0x16
    33ae:	8f 89       	ldd	r24, Y+23	; 0x17
    33b0:	98 8d       	ldd	r25, Y+24	; 0x18
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	3f ef       	ldi	r19, 0xFF	; 255
    33b6:	4f e7       	ldi	r20, 0x7F	; 127
    33b8:	57 e4       	ldi	r21, 0x47	; 71
    33ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33be:	18 16       	cp	r1, r24
    33c0:	4c f5       	brge	.+82     	; 0x3414 <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c2:	69 8d       	ldd	r22, Y+25	; 0x19
    33c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e2       	ldi	r20, 0x20	; 32
    33d0:	51 e4       	ldi	r21, 0x41	; 65
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	bc 01       	movw	r22, r24
    33dc:	cd 01       	movw	r24, r26
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	9c 8b       	std	Y+20, r25	; 0x14
    33e8:	8b 8b       	std	Y+19, r24	; 0x13
    33ea:	0f c0       	rjmp	.+30     	; 0x340a <Animation3+0xd8>
    33ec:	88 e2       	ldi	r24, 0x28	; 40
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9a 8b       	std	Y+18, r25	; 0x12
    33f2:	89 8b       	std	Y+17, r24	; 0x11
    33f4:	89 89       	ldd	r24, Y+17	; 0x11
    33f6:	9a 89       	ldd	r25, Y+18	; 0x12
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <Animation3+0xc6>
    33fc:	9a 8b       	std	Y+18, r25	; 0x12
    33fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	9c 8b       	std	Y+20, r25	; 0x14
    3408:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340a:	8b 89       	ldd	r24, Y+19	; 0x13
    340c:	9c 89       	ldd	r25, Y+20	; 0x14
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	69 f7       	brne	.-38     	; 0x33ec <Animation3+0xba>
    3412:	14 c0       	rjmp	.+40     	; 0x343c <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3414:	6d 89       	ldd	r22, Y+21	; 0x15
    3416:	7e 89       	ldd	r23, Y+22	; 0x16
    3418:	8f 89       	ldd	r24, Y+23	; 0x17
    341a:	98 8d       	ldd	r25, Y+24	; 0x18
    341c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	9c 8b       	std	Y+20, r25	; 0x14
    3426:	8b 8b       	std	Y+19, r24	; 0x13
    3428:	8b 89       	ldd	r24, Y+19	; 0x13
    342a:	9c 89       	ldd	r25, Y+20	; 0x14
    342c:	98 8b       	std	Y+16, r25	; 0x10
    342e:	8f 87       	std	Y+15, r24	; 0x0f
    3430:	8f 85       	ldd	r24, Y+15	; 0x0f
    3432:	98 89       	ldd	r25, Y+16	; 0x10
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <Animation3+0x102>
    3438:	98 8b       	std	Y+16, r25	; 0x10
    343a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    3442:	82 e0       	ldi	r24, 0x02	; 2
    3444:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <H_Led_void_setOFF>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	aa ef       	ldi	r26, 0xFA	; 250
    3454:	b3 e4       	ldi	r27, 0x43	; 67
    3456:	8b 87       	std	Y+11, r24	; 0x0b
    3458:	9c 87       	std	Y+12, r25	; 0x0c
    345a:	ad 87       	std	Y+13, r26	; 0x0d
    345c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3460:	7c 85       	ldd	r23, Y+12	; 0x0c
    3462:	8d 85       	ldd	r24, Y+13	; 0x0d
    3464:	9e 85       	ldd	r25, Y+14	; 0x0e
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	48 ec       	ldi	r20, 0xC8	; 200
    346c:	53 e4       	ldi	r21, 0x43	; 67
    346e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	8f 83       	std	Y+7, r24	; 0x07
    3478:	98 87       	std	Y+8, r25	; 0x08
    347a:	a9 87       	std	Y+9, r26	; 0x09
    347c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347e:	6f 81       	ldd	r22, Y+7	; 0x07
    3480:	78 85       	ldd	r23, Y+8	; 0x08
    3482:	89 85       	ldd	r24, Y+9	; 0x09
    3484:	9a 85       	ldd	r25, Y+10	; 0x0a
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e8       	ldi	r20, 0x80	; 128
    348c:	5f e3       	ldi	r21, 0x3F	; 63
    348e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3492:	88 23       	and	r24, r24
    3494:	2c f4       	brge	.+10     	; 0x34a0 <Animation3+0x16e>
		__ticks = 1;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	3f c0       	rjmp	.+126    	; 0x351e <Animation3+0x1ec>
	else if (__tmp > 65535)
    34a0:	6f 81       	ldd	r22, Y+7	; 0x07
    34a2:	78 85       	ldd	r23, Y+8	; 0x08
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	3f ef       	ldi	r19, 0xFF	; 255
    34ac:	4f e7       	ldi	r20, 0x7F	; 127
    34ae:	57 e4       	ldi	r21, 0x47	; 71
    34b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b4:	18 16       	cp	r1, r24
    34b6:	4c f5       	brge	.+82     	; 0x350a <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e2       	ldi	r20, 0x20	; 32
    34c6:	51 e4       	ldi	r21, 0x41	; 65
    34c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	bc 01       	movw	r22, r24
    34d2:	cd 01       	movw	r24, r26
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
    34e0:	0f c0       	rjmp	.+30     	; 0x3500 <Animation3+0x1ce>
    34e2:	88 e2       	ldi	r24, 0x28	; 40
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9c 83       	std	Y+4, r25	; 0x04
    34e8:	8b 83       	std	Y+3, r24	; 0x03
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	9c 81       	ldd	r25, Y+4	; 0x04
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <Animation3+0x1bc>
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f6:	8d 81       	ldd	r24, Y+5	; 0x05
    34f8:	9e 81       	ldd	r25, Y+6	; 0x06
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	69 f7       	brne	.-38     	; 0x34e2 <Animation3+0x1b0>
    3508:	14 c0       	rjmp	.+40     	; 0x3532 <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350a:	6f 81       	ldd	r22, Y+7	; 0x07
    350c:	78 85       	ldd	r23, Y+8	; 0x08
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	9a 85       	ldd	r25, Y+10	; 0x0a
    3512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <Animation3+0x1f8>
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3532:	6c 96       	adiw	r28, 0x1c	; 28
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <H_LCD_void_Init>:
#include "LCD_int.h"
#include<util/delay.h>


void H_LCD_void_Init(void)
{
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	2e 97       	sbiw	r28, 0x0e	; 14
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
	//set direction
	//set direction RS,EN
	M_DIO_void_setPinDir(LCD_RS_PORT,LCD_RS_PIN, OUT);
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PORT, OUT);
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	//set direction D4....D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	67 e0       	ldi	r22, 0x07	; 7
    3570:	41 e0       	ldi	r20, 0x01	; 1
    3572:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	66 e0       	ldi	r22, 0x06	; 6
    357a:	41 e0       	ldi	r20, 0x01	; 1
    357c:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	65 e0       	ldi	r22, 0x05	; 5
    3584:	41 e0       	ldi	r20, 0x01	; 1
    3586:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	64 e0       	ldi	r22, 0x04	; 4
    358e:	41 e0       	ldi	r20, 0x01	; 1
    3590:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
#if (LCD_MODE== LCD_8BIT_MODE)
	//set direction D3....D0
	M_DIO_void_setPinDir(LCD_D3_PORT,LCD_D3_PIN,OUT);
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	63 e0       	ldi	r22, 0x03	; 3
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D2_PORT,LCD_D2_PIN,OUT);
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	62 e0       	ldi	r22, 0x02	; 2
    35a2:	41 e0       	ldi	r20, 0x01	; 1
    35a4:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D1_PORT,LCD_D1_PIN,OUT);
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D0_PORT,LCD_D0_PIN,OUT);
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	41 e0       	ldi	r20, 0x01	; 1
    35b8:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	ac e0       	ldi	r26, 0x0C	; 12
    35c2:	b2 e4       	ldi	r27, 0x42	; 66
    35c4:	8b 87       	std	Y+11, r24	; 0x0b
    35c6:	9c 87       	std	Y+12, r25	; 0x0c
    35c8:	ad 87       	std	Y+13, r26	; 0x0d
    35ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	48 ec       	ldi	r20, 0xC8	; 200
    35da:	53 e4       	ldi	r21, 0x43	; 67
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	8f 83       	std	Y+7, r24	; 0x07
    35e6:	98 87       	std	Y+8, r25	; 0x08
    35e8:	a9 87       	std	Y+9, r26	; 0x09
    35ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e8       	ldi	r20, 0x80	; 128
    35fa:	5f e3       	ldi	r21, 0x3F	; 63
    35fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3600:	88 23       	and	r24, r24
    3602:	2c f4       	brge	.+10     	; 0x360e <H_LCD_void_Init+0xca>
		__ticks = 1;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	9e 83       	std	Y+6, r25	; 0x06
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	3f c0       	rjmp	.+126    	; 0x368c <H_LCD_void_Init+0x148>
	else if (__tmp > 65535)
    360e:	6f 81       	ldd	r22, Y+7	; 0x07
    3610:	78 85       	ldd	r23, Y+8	; 0x08
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	3f ef       	ldi	r19, 0xFF	; 255
    361a:	4f e7       	ldi	r20, 0x7F	; 127
    361c:	57 e4       	ldi	r21, 0x47	; 71
    361e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3622:	18 16       	cp	r1, r24
    3624:	4c f5       	brge	.+82     	; 0x3678 <H_LCD_void_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3626:	6b 85       	ldd	r22, Y+11	; 0x0b
    3628:	7c 85       	ldd	r23, Y+12	; 0x0c
    362a:	8d 85       	ldd	r24, Y+13	; 0x0d
    362c:	9e 85       	ldd	r25, Y+14	; 0x0e
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e2       	ldi	r20, 0x20	; 32
    3634:	51 e4       	ldi	r21, 0x41	; 65
    3636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
    364e:	0f c0       	rjmp	.+30     	; 0x366e <H_LCD_void_Init+0x12a>
    3650:	88 e2       	ldi	r24, 0x28	; 40
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	8b 83       	std	Y+3, r24	; 0x03
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <H_LCD_void_Init+0x118>
    3660:	9c 83       	std	Y+4, r25	; 0x04
    3662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366e:	8d 81       	ldd	r24, Y+5	; 0x05
    3670:	9e 81       	ldd	r25, Y+6	; 0x06
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	69 f7       	brne	.-38     	; 0x3650 <H_LCD_void_Init+0x10c>
    3676:	14 c0       	rjmp	.+40     	; 0x36a0 <H_LCD_void_Init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3678:	6f 81       	ldd	r22, Y+7	; 0x07
    367a:	78 85       	ldd	r23, Y+8	; 0x08
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e 83       	std	Y+6, r25	; 0x06
    368a:	8d 83       	std	Y+5, r24	; 0x05
    368c:	8d 81       	ldd	r24, Y+5	; 0x05
    368e:	9e 81       	ldd	r25, Y+6	; 0x06
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <H_LCD_void_Init+0x154>
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01

#endif
	//send init sequence
#if(LCD_MODE== LCD_8BIT_MODE)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
    36a0:	88 e3       	ldi	r24, 0x38	; 56
    36a2:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>

#else
#error("wrong lcd mood")
#endif
	//display ON ,OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURS0N_BLINKOFF);
    36a6:	8e e0       	ldi	r24, 0x0E	; 14
    36a8:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>
	//display clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>
	//entry mode set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    36b2:	86 e0       	ldi	r24, 0x06	; 6
    36b4:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>
}
    36b8:	2e 96       	adiw	r28, 0x0e	; 14
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	0f 92       	push	r0
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=1;
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>

	//step 2   write data
	H_LCD_void_writeNLatch( copy_u8data);
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <H_LCD_void_writeNLatch>
}
    36e6:	0f 90       	pop	r0
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	0f 92       	push	r0
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=0
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	61 e0       	ldi	r22, 0x01	; 1
    36fe:	40 e0       	ldi	r20, 0x00	; 0
    3700:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <H_LCD_void_writeNLatch>
}
    370a:	0f 90       	pop	r0
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	08 95       	ret

00003712 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 *pstr)
{
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	00 d0       	rcall	.+0      	; 0x3718 <H_LCD_void_sendString+0x6>
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	9a 83       	std	Y+2, r25	; 0x02
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	0a c0       	rjmp	.+20     	; 0x3736 <H_LCD_void_sendString+0x24>
	while(*pstr)
	{
		H_LCD_void_sendData(*pstr);
    3722:	e9 81       	ldd	r30, Y+1	; 0x01
    3724:	fa 81       	ldd	r31, Y+2	; 0x02
    3726:	80 81       	ld	r24, Z
    3728:	0e 94 65 1b 	call	0x36ca	; 0x36ca <H_LCD_void_sendData>
		pstr++;
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
}
void H_LCD_void_sendString(const u8 *pstr)
{
	while(*pstr)
    3736:	e9 81       	ldd	r30, Y+1	; 0x01
    3738:	fa 81       	ldd	r31, Y+2	; 0x02
    373a:	80 81       	ld	r24, Z
    373c:	88 23       	and	r24, r24
    373e:	89 f7       	brne	.-30     	; 0x3722 <H_LCD_void_sendString+0x10>
		H_LCD_void_sendData(*pstr);
		pstr++;

	}

}
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>
}
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32_Num)
{
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	2f 97       	sbiw	r28, 0x0f	; 15
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	6c 87       	std	Y+12, r22	; 0x0c
    3778:	7d 87       	std	Y+13, r23	; 0x0d
    377a:	8e 87       	std	Y+14, r24	; 0x0e
    377c:	9f 87       	std	Y+15, r25	; 0x0f
  u8 loc_Arr[10]={0};
    377e:	8a e0       	ldi	r24, 0x0A	; 10
    3780:	fe 01       	movw	r30, r28
    3782:	32 96       	adiw	r30, 0x02	; 2
    3784:	df 01       	movw	r26, r30
    3786:	98 2f       	mov	r25, r24
    3788:	1d 92       	st	X+, r1
    378a:	9a 95       	dec	r25
    378c:	e9 f7       	brne	.-6      	; 0x3788 <H_LCD_void_sendIntNum+0x2a>
  s8 i;
  if(copy_s32_Num==0)
    378e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3790:	9d 85       	ldd	r25, Y+13	; 0x0d
    3792:	ae 85       	ldd	r26, Y+14	; 0x0e
    3794:	bf 85       	ldd	r27, Y+15	; 0x0f
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	a1 05       	cpc	r26, r1
    379a:	b1 05       	cpc	r27, r1
    379c:	21 f4       	brne	.+8      	; 0x37a6 <H_LCD_void_sendIntNum+0x48>
  {
	  H_LCD_void_sendData('0');
    379e:	80 e3       	ldi	r24, 0x30	; 48
    37a0:	0e 94 65 1b 	call	0x36ca	; 0x36ca <H_LCD_void_sendData>
    37a4:	49 c0       	rjmp	.+146    	; 0x3838 <H_LCD_void_sendIntNum+0xda>

  }
  else if (copy_s32_Num<0)
    37a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37aa:	ae 85       	ldd	r26, Y+14	; 0x0e
    37ac:	bf 85       	ldd	r27, Y+15	; 0x0f
    37ae:	bb 23       	and	r27, r27
    37b0:	0c f0       	brlt	.+2      	; 0x37b4 <H_LCD_void_sendIntNum+0x56>
    37b2:	42 c0       	rjmp	.+132    	; 0x3838 <H_LCD_void_sendIntNum+0xda>
  {
	  H_LCD_void_sendData('-');
    37b4:	8d e2       	ldi	r24, 0x2D	; 45
    37b6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <H_LCD_void_sendData>
	  copy_s32_Num*=-1;
    37ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    37bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    37be:	ae 85       	ldd	r26, Y+14	; 0x0e
    37c0:	bf 85       	ldd	r27, Y+15	; 0x0f
    37c2:	b0 95       	com	r27
    37c4:	a0 95       	com	r26
    37c6:	90 95       	com	r25
    37c8:	81 95       	neg	r24
    37ca:	9f 4f       	sbci	r25, 0xFF	; 255
    37cc:	af 4f       	sbci	r26, 0xFF	; 255
    37ce:	bf 4f       	sbci	r27, 0xFF	; 255
    37d0:	8c 87       	std	Y+12, r24	; 0x0c
    37d2:	9d 87       	std	Y+13, r25	; 0x0d
    37d4:	ae 87       	std	Y+14, r26	; 0x0e
    37d6:	bf 87       	std	Y+15, r27	; 0x0f
    37d8:	2f c0       	rjmp	.+94     	; 0x3838 <H_LCD_void_sendIntNum+0xda>
  }
  while (copy_s32_Num!=0)
  {
	  loc_Arr[i]=copy_s32_Num%10;
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	08 2f       	mov	r16, r24
    37de:	11 27       	eor	r17, r17
    37e0:	07 fd       	sbrc	r16, 7
    37e2:	10 95       	com	r17
    37e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    37e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    37e8:	ae 85       	ldd	r26, Y+14	; 0x0e
    37ea:	bf 85       	ldd	r27, Y+15	; 0x0f
    37ec:	2a e0       	ldi	r18, 0x0A	; 10
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e0       	ldi	r20, 0x00	; 0
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__divmodsi4>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	28 2f       	mov	r18, r24
    3802:	ce 01       	movw	r24, r28
    3804:	02 96       	adiw	r24, 0x02	; 2
    3806:	fc 01       	movw	r30, r24
    3808:	e0 0f       	add	r30, r16
    380a:	f1 1f       	adc	r31, r17
    380c:	20 83       	st	Z, r18
	  copy_s32_Num=copy_s32_Num/10;
    380e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3810:	9d 85       	ldd	r25, Y+13	; 0x0d
    3812:	ae 85       	ldd	r26, Y+14	; 0x0e
    3814:	bf 85       	ldd	r27, Y+15	; 0x0f
    3816:	2a e0       	ldi	r18, 0x0A	; 10
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	50 e0       	ldi	r21, 0x00	; 0
    381e:	bc 01       	movw	r22, r24
    3820:	cd 01       	movw	r24, r26
    3822:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__divmodsi4>
    3826:	da 01       	movw	r26, r20
    3828:	c9 01       	movw	r24, r18
    382a:	8c 87       	std	Y+12, r24	; 0x0c
    382c:	9d 87       	std	Y+13, r25	; 0x0d
    382e:	ae 87       	std	Y+14, r26	; 0x0e
    3830:	bf 87       	std	Y+15, r27	; 0x0f
	  i++;
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	8f 5f       	subi	r24, 0xFF	; 255
    3836:	89 83       	std	Y+1, r24	; 0x01
  else if (copy_s32_Num<0)
  {
	  H_LCD_void_sendData('-');
	  copy_s32_Num*=-1;
  }
  while (copy_s32_Num!=0)
    3838:	8c 85       	ldd	r24, Y+12	; 0x0c
    383a:	9d 85       	ldd	r25, Y+13	; 0x0d
    383c:	ae 85       	ldd	r26, Y+14	; 0x0e
    383e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	a1 05       	cpc	r26, r1
    3844:	b1 05       	cpc	r27, r1
    3846:	49 f6       	brne	.-110    	; 0x37da <H_LCD_void_sendIntNum+0x7c>
  {
	  loc_Arr[i]=copy_s32_Num%10;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	81 50       	subi	r24, 0x01	; 1
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	11 c0       	rjmp	.+34     	; 0x3872 <H_LCD_void_sendIntNum+0x114>
  while(i>=0)
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	28 2f       	mov	r18, r24
    3854:	33 27       	eor	r19, r19
    3856:	27 fd       	sbrc	r18, 7
    3858:	30 95       	com	r19
    385a:	ce 01       	movw	r24, r28
    385c:	02 96       	adiw	r24, 0x02	; 2
    385e:	fc 01       	movw	r30, r24
    3860:	e2 0f       	add	r30, r18
    3862:	f3 1f       	adc	r31, r19
    3864:	80 81       	ld	r24, Z
    3866:	80 5d       	subi	r24, 0xD0	; 208
    3868:	0e 94 65 1b 	call	0x36ca	; 0x36ca <H_LCD_void_sendData>
	  i--;
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	81 50       	subi	r24, 0x01	; 1
    3870:	89 83       	std	Y+1, r24	; 0x01
	  loc_Arr[i]=copy_s32_Num%10;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
  while(i>=0)
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	88 23       	and	r24, r24
    3876:	64 f7       	brge	.-40     	; 0x3850 <H_LCD_void_sendIntNum+0xf2>
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
	  i--;
  }
}
    3878:	2f 96       	adiw	r28, 0x0f	; 15
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	cf 91       	pop	r28
    3886:	df 91       	pop	r29
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	08 95       	ret

0000388e <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    388e:	df 93       	push	r29
    3890:	cf 93       	push	r28
    3892:	00 d0       	rcall	.+0      	; 0x3894 <H_LCD_void_gotXY+0x6>
    3894:	00 d0       	rcall	.+0      	; 0x3896 <H_LCD_void_gotXY+0x8>
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	89 83       	std	Y+1, r24	; 0x01
    389c:	6a 83       	std	Y+2, r22	; 0x02
 if (copy_u8Row==0||copy_u8Row==1)
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	88 23       	and	r24, r24
    38a2:	19 f0       	breq	.+6      	; 0x38aa <H_LCD_void_gotXY+0x1c>
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	81 30       	cpi	r24, 0x01	; 1
    38a8:	d9 f4       	brne	.+54     	; 0x38e0 <H_LCD_void_gotXY+0x52>
 {
	 if(copy_u8Col >= 0 &&copy_u8Col <=15)
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	80 31       	cpi	r24, 0x10	; 16
    38ae:	c0 f4       	brcc	.+48     	; 0x38e0 <H_LCD_void_gotXY+0x52>
	 {
		 switch(copy_u8Row)
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	28 2f       	mov	r18, r24
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	3c 83       	std	Y+4, r19	; 0x04
    38b8:	2b 83       	std	Y+3, r18	; 0x03
    38ba:	8b 81       	ldd	r24, Y+3	; 0x03
    38bc:	9c 81       	ldd	r25, Y+4	; 0x04
    38be:	00 97       	sbiw	r24, 0x00	; 0
    38c0:	31 f0       	breq	.+12     	; 0x38ce <H_LCD_void_gotXY+0x40>
    38c2:	2b 81       	ldd	r18, Y+3	; 0x03
    38c4:	3c 81       	ldd	r19, Y+4	; 0x04
    38c6:	21 30       	cpi	r18, 0x01	; 1
    38c8:	31 05       	cpc	r19, r1
    38ca:	31 f0       	breq	.+12     	; 0x38d8 <H_LCD_void_gotXY+0x4a>
    38cc:	09 c0       	rjmp	.+18     	; 0x38e0 <H_LCD_void_gotXY+0x52>
		 {
		 case 0 :
			 H_LCD_void_sendCommand(LCD_R0C0+copy_u8Col);
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	80 58       	subi	r24, 0x80	; 128
    38d2:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>
    38d6:	04 c0       	rjmp	.+8      	; 0x38e0 <H_LCD_void_gotXY+0x52>
			 break;

		 case 1:
			 H_LCD_void_sendCommand(LCD_R1C0+copy_u8Col);
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	80 54       	subi	r24, 0x40	; 64
    38dc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <H_LCD_void_sendCommand>
			 break;

		 }
	 }
 }
}
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	08 95       	ret

000038ee <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 *ArrPattern,u8 copy_u8char)
{
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <H_LCD_void_creatCustomChar+0x6>
    38f4:	0f 92       	push	r0
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	9a 83       	std	Y+2, r25	; 0x02
    38fc:	89 83       	std	Y+1, r24	; 0x01
    38fe:	6b 83       	std	Y+3, r22	; 0x03

}
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8char)
{
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	0f 92       	push	r0
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	89 83       	std	Y+1, r24	; 0x01

}
    3918:	0f 90       	pop	r0
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	08 95       	ret

00003920 <calculator_App>:
f32  calculator_App(f32 a,f32 b,u8 operator)
{
    3920:	0f 93       	push	r16
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	2f 97       	sbiw	r28, 0x0f	; 15
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	6d 83       	std	Y+5, r22	; 0x05
    3938:	7e 83       	std	Y+6, r23	; 0x06
    393a:	8f 83       	std	Y+7, r24	; 0x07
    393c:	98 87       	std	Y+8, r25	; 0x08
    393e:	29 87       	std	Y+9, r18	; 0x09
    3940:	3a 87       	std	Y+10, r19	; 0x0a
    3942:	4b 87       	std	Y+11, r20	; 0x0b
    3944:	5c 87       	std	Y+12, r21	; 0x0c
    3946:	0d 87       	std	Y+13, r16	; 0x0d
	f32 result;
	switch(operator)
    3948:	8d 85       	ldd	r24, Y+13	; 0x0d
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	3f 87       	std	Y+15, r19	; 0x0f
    3950:	2e 87       	std	Y+14, r18	; 0x0e
    3952:	8e 85       	ldd	r24, Y+14	; 0x0e
    3954:	9f 85       	ldd	r25, Y+15	; 0x0f
    3956:	8b 32       	cpi	r24, 0x2B	; 43
    3958:	91 05       	cpc	r25, r1
    395a:	b1 f0       	breq	.+44     	; 0x3988 <calculator_App+0x68>
    395c:	2e 85       	ldd	r18, Y+14	; 0x0e
    395e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3960:	2c 32       	cpi	r18, 0x2C	; 44
    3962:	31 05       	cpc	r19, r1
    3964:	34 f4       	brge	.+12     	; 0x3972 <calculator_App+0x52>
    3966:	8e 85       	ldd	r24, Y+14	; 0x0e
    3968:	9f 85       	ldd	r25, Y+15	; 0x0f
    396a:	8a 32       	cpi	r24, 0x2A	; 42
    396c:	91 05       	cpc	r25, r1
    396e:	71 f1       	breq	.+92     	; 0x39cc <calculator_App+0xac>
    3970:	4e c0       	rjmp	.+156    	; 0x3a0e <calculator_App+0xee>
    3972:	2e 85       	ldd	r18, Y+14	; 0x0e
    3974:	3f 85       	ldd	r19, Y+15	; 0x0f
    3976:	2d 32       	cpi	r18, 0x2D	; 45
    3978:	31 05       	cpc	r19, r1
    397a:	b9 f0       	breq	.+46     	; 0x39aa <calculator_App+0x8a>
    397c:	8e 85       	ldd	r24, Y+14	; 0x0e
    397e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3980:	8f 32       	cpi	r24, 0x2F	; 47
    3982:	91 05       	cpc	r25, r1
    3984:	a1 f1       	breq	.+104    	; 0x39ee <calculator_App+0xce>
    3986:	43 c0       	rjmp	.+134    	; 0x3a0e <calculator_App+0xee>
	{
	case('+'):
			result=a+b;
    3988:	6d 81       	ldd	r22, Y+5	; 0x05
    398a:	7e 81       	ldd	r23, Y+6	; 0x06
    398c:	8f 81       	ldd	r24, Y+7	; 0x07
    398e:	98 85       	ldd	r25, Y+8	; 0x08
    3990:	29 85       	ldd	r18, Y+9	; 0x09
    3992:	3a 85       	ldd	r19, Y+10	; 0x0a
    3994:	4b 85       	ldd	r20, Y+11	; 0x0b
    3996:	5c 85       	ldd	r21, Y+12	; 0x0c
    3998:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	9a 83       	std	Y+2, r25	; 0x02
    39a4:	ab 83       	std	Y+3, r26	; 0x03
    39a6:	bc 83       	std	Y+4, r27	; 0x04
    39a8:	32 c0       	rjmp	.+100    	; 0x3a0e <calculator_App+0xee>
	        break;
	case('-'):
			result=a-b;
    39aa:	6d 81       	ldd	r22, Y+5	; 0x05
    39ac:	7e 81       	ldd	r23, Y+6	; 0x06
    39ae:	8f 81       	ldd	r24, Y+7	; 0x07
    39b0:	98 85       	ldd	r25, Y+8	; 0x08
    39b2:	29 85       	ldd	r18, Y+9	; 0x09
    39b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    39b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    39b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    39ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	9a 83       	std	Y+2, r25	; 0x02
    39c6:	ab 83       	std	Y+3, r26	; 0x03
    39c8:	bc 83       	std	Y+4, r27	; 0x04
    39ca:	21 c0       	rjmp	.+66     	; 0x3a0e <calculator_App+0xee>
		     break;
	case('*'):
			result=a*b;
    39cc:	6d 81       	ldd	r22, Y+5	; 0x05
    39ce:	7e 81       	ldd	r23, Y+6	; 0x06
    39d0:	8f 81       	ldd	r24, Y+7	; 0x07
    39d2:	98 85       	ldd	r25, Y+8	; 0x08
    39d4:	29 85       	ldd	r18, Y+9	; 0x09
    39d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    39d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    39da:	5c 85       	ldd	r21, Y+12	; 0x0c
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	89 83       	std	Y+1, r24	; 0x01
    39e6:	9a 83       	std	Y+2, r25	; 0x02
    39e8:	ab 83       	std	Y+3, r26	; 0x03
    39ea:	bc 83       	std	Y+4, r27	; 0x04
    39ec:	10 c0       	rjmp	.+32     	; 0x3a0e <calculator_App+0xee>
		     break;
	case('/'):
			result=a/b;
    39ee:	6d 81       	ldd	r22, Y+5	; 0x05
    39f0:	7e 81       	ldd	r23, Y+6	; 0x06
    39f2:	8f 81       	ldd	r24, Y+7	; 0x07
    39f4:	98 85       	ldd	r25, Y+8	; 0x08
    39f6:	29 85       	ldd	r18, Y+9	; 0x09
    39f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    39fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    39fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    39fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	9a 83       	std	Y+2, r25	; 0x02
    3a0a:	ab 83       	std	Y+3, r26	; 0x03
    3a0c:	bc 83       	std	Y+4, r27	; 0x04
		      break;

	}
	return result;
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	9a 81       	ldd	r25, Y+2	; 0x02
    3a12:	ab 81       	ldd	r26, Y+3	; 0x03
    3a14:	bc 81       	ldd	r27, Y+4	; 0x04

}
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	2f 96       	adiw	r28, 0x0f	; 15
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	0f 91       	pop	r16
    3a2c:	08 95       	ret

00003a2e <H_LCD_void_writeNLatch>:
static void H_LCD_void_writeNLatch(u8 copy_u8Byte)
{
    3a2e:	df 93       	push	r29
    3a30:	cf 93       	push	r28
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	6d 97       	sbiw	r28, 0x1d	; 29
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	8d 8f       	std	Y+29, r24	; 0x1d
#if(LCD_MODE== LCD_8BIT_MODE)
	//EN=0, disabled
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	62 e0       	ldi	r22, 0x02	; 2
    3a48:	40 e0       	ldi	r20, 0x00	; 0
    3a4a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	//step1 prepare data (DB7...DB0)

	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Byte,7));
    3a4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a50:	98 2f       	mov	r25, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	99 27       	eor	r25, r25
    3a56:	99 1f       	adc	r25, r25
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	67 e0       	ldi	r22, 0x07	; 7
    3a5c:	49 2f       	mov	r20, r25
    3a5e:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Byte,6));
    3a62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a64:	82 95       	swap	r24
    3a66:	86 95       	lsr	r24
    3a68:	86 95       	lsr	r24
    3a6a:	83 70       	andi	r24, 0x03	; 3
    3a6c:	98 2f       	mov	r25, r24
    3a6e:	91 70       	andi	r25, 0x01	; 1
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	66 e0       	ldi	r22, 0x06	; 6
    3a74:	49 2f       	mov	r20, r25
    3a76:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Byte,5));
    3a7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a7c:	82 95       	swap	r24
    3a7e:	86 95       	lsr	r24
    3a80:	87 70       	andi	r24, 0x07	; 7
    3a82:	98 2f       	mov	r25, r24
    3a84:	91 70       	andi	r25, 0x01	; 1
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	65 e0       	ldi	r22, 0x05	; 5
    3a8a:	49 2f       	mov	r20, r25
    3a8c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Byte,4));
    3a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a92:	82 95       	swap	r24
    3a94:	8f 70       	andi	r24, 0x0F	; 15
    3a96:	98 2f       	mov	r25, r24
    3a98:	91 70       	andi	r25, 0x01	; 1
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	64 e0       	ldi	r22, 0x04	; 4
    3a9e:	49 2f       	mov	r20, r25
    3aa0:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D3_PORT,LCD_D3_PIN,GET_BIT(copy_u8Byte,3));
    3aa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aa6:	86 95       	lsr	r24
    3aa8:	86 95       	lsr	r24
    3aaa:	86 95       	lsr	r24
    3aac:	98 2f       	mov	r25, r24
    3aae:	91 70       	andi	r25, 0x01	; 1
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	63 e0       	ldi	r22, 0x03	; 3
    3ab4:	49 2f       	mov	r20, r25
    3ab6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D2_PORT,LCD_D2_PIN,GET_BIT(copy_u8Byte,2));
    3aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3abc:	86 95       	lsr	r24
    3abe:	86 95       	lsr	r24
    3ac0:	98 2f       	mov	r25, r24
    3ac2:	91 70       	andi	r25, 0x01	; 1
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	62 e0       	ldi	r22, 0x02	; 2
    3ac8:	49 2f       	mov	r20, r25
    3aca:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D1_PORT,LCD_D1_PIN,GET_BIT(copy_u8Byte,1));
    3ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad0:	86 95       	lsr	r24
    3ad2:	98 2f       	mov	r25, r24
    3ad4:	91 70       	andi	r25, 0x01	; 1
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	61 e0       	ldi	r22, 0x01	; 1
    3ada:	49 2f       	mov	r20, r25
    3adc:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D0_PORT,LCD_D0_PIN,GET_BIT(copy_u8Byte,0));
    3ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	91 70       	andi	r25, 0x01	; 1
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	49 2f       	mov	r20, r25
    3aec:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	//step2 activate enable ,(E=1)
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	62 e0       	ldi	r22, 0x02	; 2
    3af4:	41 e0       	ldi	r20, 0x01	; 1
    3af6:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	a0 e8       	ldi	r26, 0x80	; 128
    3b00:	bf e3       	ldi	r27, 0x3F	; 63
    3b02:	89 8f       	std	Y+25, r24	; 0x19
    3b04:	9a 8f       	std	Y+26, r25	; 0x1a
    3b06:	ab 8f       	std	Y+27, r26	; 0x1b
    3b08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	48 ec       	ldi	r20, 0xC8	; 200
    3b18:	53 e4       	ldi	r21, 0x43	; 67
    3b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	8d 8b       	std	Y+21, r24	; 0x15
    3b24:	9e 8b       	std	Y+22, r25	; 0x16
    3b26:	af 8b       	std	Y+23, r26	; 0x17
    3b28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b30:	98 8d       	ldd	r25, Y+24	; 0x18
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e8       	ldi	r20, 0x80	; 128
    3b38:	5f e3       	ldi	r21, 0x3F	; 63
    3b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b3e:	88 23       	and	r24, r24
    3b40:	2c f4       	brge	.+10     	; 0x3b4c <H_LCD_void_writeNLatch+0x11e>
		__ticks = 1;
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	9c 8b       	std	Y+20, r25	; 0x14
    3b48:	8b 8b       	std	Y+19, r24	; 0x13
    3b4a:	3f c0       	rjmp	.+126    	; 0x3bca <H_LCD_void_writeNLatch+0x19c>
	else if (__tmp > 65535)
    3b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b50:	8f 89       	ldd	r24, Y+23	; 0x17
    3b52:	98 8d       	ldd	r25, Y+24	; 0x18
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	3f ef       	ldi	r19, 0xFF	; 255
    3b58:	4f e7       	ldi	r20, 0x7F	; 127
    3b5a:	57 e4       	ldi	r21, 0x47	; 71
    3b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b60:	18 16       	cp	r1, r24
    3b62:	4c f5       	brge	.+82     	; 0x3bb6 <H_LCD_void_writeNLatch+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b64:	69 8d       	ldd	r22, Y+25	; 0x19
    3b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e2       	ldi	r20, 0x20	; 32
    3b72:	51 e4       	ldi	r21, 0x41	; 65
    3b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	9c 8b       	std	Y+20, r25	; 0x14
    3b8a:	8b 8b       	std	Y+19, r24	; 0x13
    3b8c:	0f c0       	rjmp	.+30     	; 0x3bac <H_LCD_void_writeNLatch+0x17e>
    3b8e:	88 e2       	ldi	r24, 0x28	; 40
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	9a 8b       	std	Y+18, r25	; 0x12
    3b94:	89 8b       	std	Y+17, r24	; 0x11
    3b96:	89 89       	ldd	r24, Y+17	; 0x11
    3b98:	9a 89       	ldd	r25, Y+18	; 0x12
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <H_LCD_void_writeNLatch+0x16c>
    3b9e:	9a 8b       	std	Y+18, r25	; 0x12
    3ba0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	9c 8b       	std	Y+20, r25	; 0x14
    3baa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bac:	8b 89       	ldd	r24, Y+19	; 0x13
    3bae:	9c 89       	ldd	r25, Y+20	; 0x14
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	69 f7       	brne	.-38     	; 0x3b8e <H_LCD_void_writeNLatch+0x160>
    3bb4:	14 c0       	rjmp	.+40     	; 0x3bde <H_LCD_void_writeNLatch+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bba:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	9c 8b       	std	Y+20, r25	; 0x14
    3bc8:	8b 8b       	std	Y+19, r24	; 0x13
    3bca:	8b 89       	ldd	r24, Y+19	; 0x13
    3bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bce:	98 8b       	std	Y+16, r25	; 0x10
    3bd0:	8f 87       	std	Y+15, r24	; 0x0f
    3bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd4:	98 89       	ldd	r25, Y+16	; 0x10
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <H_LCD_void_writeNLatch+0x1a8>
    3bda:	98 8b       	std	Y+16, r25	; 0x10
    3bdc:	8f 87       	std	Y+15, r24	; 0x0f

	//step3 : delay for 1msec
	_delay_ms(1);

	//step4 :deactivate enable (E=10)
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	62 e0       	ldi	r22, 0x02	; 2
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	a0 ea       	ldi	r26, 0xA0	; 160
    3bee:	b0 e4       	ldi	r27, 0x40	; 64
    3bf0:	8b 87       	std	Y+11, r24	; 0x0b
    3bf2:	9c 87       	std	Y+12, r25	; 0x0c
    3bf4:	ad 87       	std	Y+13, r26	; 0x0d
    3bf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	48 ec       	ldi	r20, 0xC8	; 200
    3c06:	53 e4       	ldi	r21, 0x43	; 67
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	8f 83       	std	Y+7, r24	; 0x07
    3c12:	98 87       	std	Y+8, r25	; 0x08
    3c14:	a9 87       	std	Y+9, r26	; 0x09
    3c16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c18:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1a:	78 85       	ldd	r23, Y+8	; 0x08
    3c1c:	89 85       	ldd	r24, Y+9	; 0x09
    3c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e8       	ldi	r20, 0x80	; 128
    3c26:	5f e3       	ldi	r21, 0x3F	; 63
    3c28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c2c:	88 23       	and	r24, r24
    3c2e:	2c f4       	brge	.+10     	; 0x3c3a <H_LCD_void_writeNLatch+0x20c>
		__ticks = 1;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	9e 83       	std	Y+6, r25	; 0x06
    3c36:	8d 83       	std	Y+5, r24	; 0x05
    3c38:	3f c0       	rjmp	.+126    	; 0x3cb8 <H_LCD_void_writeNLatch+0x28a>
	else if (__tmp > 65535)
    3c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3c:	78 85       	ldd	r23, Y+8	; 0x08
    3c3e:	89 85       	ldd	r24, Y+9	; 0x09
    3c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	3f ef       	ldi	r19, 0xFF	; 255
    3c46:	4f e7       	ldi	r20, 0x7F	; 127
    3c48:	57 e4       	ldi	r21, 0x47	; 71
    3c4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4e:	18 16       	cp	r1, r24
    3c50:	4c f5       	brge	.+82     	; 0x3ca4 <H_LCD_void_writeNLatch+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e2       	ldi	r20, 0x20	; 32
    3c60:	51 e4       	ldi	r21, 0x41	; 65
    3c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	0f c0       	rjmp	.+30     	; 0x3c9a <H_LCD_void_writeNLatch+0x26c>
    3c7c:	88 e2       	ldi	r24, 0x28	; 40
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	9c 83       	std	Y+4, r25	; 0x04
    3c82:	8b 83       	std	Y+3, r24	; 0x03
    3c84:	8b 81       	ldd	r24, Y+3	; 0x03
    3c86:	9c 81       	ldd	r25, Y+4	; 0x04
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <H_LCD_void_writeNLatch+0x25a>
    3c8c:	9c 83       	std	Y+4, r25	; 0x04
    3c8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c90:	8d 81       	ldd	r24, Y+5	; 0x05
    3c92:	9e 81       	ldd	r25, Y+6	; 0x06
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	9e 83       	std	Y+6, r25	; 0x06
    3c98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	69 f7       	brne	.-38     	; 0x3c7c <H_LCD_void_writeNLatch+0x24e>
    3ca2:	14 c0       	rjmp	.+40     	; 0x3ccc <H_LCD_void_writeNLatch+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	78 85       	ldd	r23, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	9e 83       	std	Y+6, r25	; 0x06
    3cb6:	8d 83       	std	Y+5, r24	; 0x05
    3cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cba:	9e 81       	ldd	r25, Y+6	; 0x06
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <H_LCD_void_writeNLatch+0x296>
    3cc8:	9a 83       	std	Y+2, r25	; 0x02
    3cca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
#else
  #error("wrong lcd mode")
#endif

}
    3ccc:	6d 96       	adiw	r28, 0x1d	; 29
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	de bf       	out	0x3e, r29	; 62
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	cd bf       	out	0x3d, r28	; 61
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	08 95       	ret

00003cde <H_KEYPAD_void_init>:
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"
#include<util/delay.h>

void H_KEYPAD_void_init()
{
    3cde:	df 93       	push	r29
    3ce0:	cf 93       	push	r28
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
	//set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	64 e0       	ldi	r22, 0x04	; 4
    3cea:	41 e0       	ldi	r20, 0x01	; 1
    3cec:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	65 e0       	ldi	r22, 0x05	; 5
    3cf4:	41 e0       	ldi	r20, 0x01	; 1
    3cf6:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	66 e0       	ldi	r22, 0x06	; 6
    3cfe:	41 e0       	ldi	r20, 0x01	; 1
    3d00:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	67 e0       	ldi	r22, 0x07	; 7
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT, KEYPAD_C0_PIN, IN);
    3d0e:	83 e0       	ldi	r24, 0x03	; 3
    3d10:	62 e0       	ldi	r22, 0x02	; 2
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    3d18:	83 e0       	ldi	r24, 0x03	; 3
    3d1a:	63 e0       	ldi	r22, 0x03	; 3
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	64 e0       	ldi	r22, 0x04	; 4
    3d26:	40 e0       	ldi	r20, 0x00	; 0
    3d28:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	65 e0       	ldi	r22, 0x05	; 5
    3d30:	40 e0       	ldi	r20, 0x00	; 0
    3d32:	0e 94 fb 07 	call	0xff6	; 0xff6 <M_DIO_void_setPinDir>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	64 e0       	ldi	r22, 0x04	; 4
    3d3a:	41 e0       	ldi	r20, 0x01	; 1
    3d3c:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	65 e0       	ldi	r22, 0x05	; 5
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	66 e0       	ldi	r22, 0x06	; 6
    3d4e:	41 e0       	ldi	r20, 0x01	; 1
    3d50:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	67 e0       	ldi	r22, 0x07	; 7
    3d58:	41 e0       	ldi	r20, 0x01	; 1
    3d5a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
    }
    3d5e:	cf 91       	pop	r28
    3d60:	df 91       	pop	r29
    3d62:	08 95       	ret

00003d64 <H_KEYPAD_void_getPressedKey>:

u8 H_KEYPAD_void_getPressedKey()
{
    3d64:	df 93       	push	r29
    3d66:	cf 93       	push	r28
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	a8 97       	sbiw	r28, 0x28	; 40
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
	u8 loc_Key= NUM_PRESSED_KEY ;
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	42 96       	adiw	r24, 0x12	; 18
    3d80:	9d a3       	std	Y+37, r25	; 0x25
    3d82:	8c a3       	std	Y+36, r24	; 0x24
    3d84:	e8 e6       	ldi	r30, 0x68	; 104
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	ff a3       	std	Y+39, r31	; 0x27
    3d8a:	ee a3       	std	Y+38, r30	; 0x26
    3d8c:	f0 e1       	ldi	r31, 0x10	; 16
    3d8e:	f8 a7       	std	Y+40, r31	; 0x28
    3d90:	ee a1       	ldd	r30, Y+38	; 0x26
    3d92:	ff a1       	ldd	r31, Y+39	; 0x27
    3d94:	00 80       	ld	r0, Z
    3d96:	8e a1       	ldd	r24, Y+38	; 0x26
    3d98:	9f a1       	ldd	r25, Y+39	; 0x27
    3d9a:	01 96       	adiw	r24, 0x01	; 1
    3d9c:	9f a3       	std	Y+39, r25	; 0x27
    3d9e:	8e a3       	std	Y+38, r24	; 0x26
    3da0:	ec a1       	ldd	r30, Y+36	; 0x24
    3da2:	fd a1       	ldd	r31, Y+37	; 0x25
    3da4:	00 82       	st	Z, r0
    3da6:	8c a1       	ldd	r24, Y+36	; 0x24
    3da8:	9d a1       	ldd	r25, Y+37	; 0x25
    3daa:	01 96       	adiw	r24, 0x01	; 1
    3dac:	9d a3       	std	Y+37, r25	; 0x25
    3dae:	8c a3       	std	Y+36, r24	; 0x24
    3db0:	98 a5       	ldd	r25, Y+40	; 0x28
    3db2:	91 50       	subi	r25, 0x01	; 1
    3db4:	98 a7       	std	Y+40, r25	; 0x28
    3db6:	e8 a5       	ldd	r30, Y+40	; 0x28
    3db8:	ee 23       	and	r30, r30
    3dba:	51 f7       	brne	.-44     	; 0x3d90 <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    3dbc:	84 e0       	ldi	r24, 0x04	; 4
    3dbe:	88 8b       	std	Y+16, r24	; 0x10
    3dc0:	c9 c0       	rjmp	.+402    	; 0x3f54 <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	68 89       	ldd	r22, Y+16	; 0x10
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	8f 87       	std	Y+15, r24	; 0x0f
    3dd0:	b5 c0       	rjmp	.+362    	; 0x3f3c <H_KEYPAD_void_getPressedKey+0x1d8>
		{
			M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    3dd2:	9e 01       	movw	r18, r28
    3dd4:	2e 5d       	subi	r18, 0xDE	; 222
    3dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd8:	83 e0       	ldi	r24, 0x03	; 3
    3dda:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ddc:	a9 01       	movw	r20, r18
    3dde:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
			if(read==ACTIVE_LOW_PRESSED)
    3de2:	8a a1       	ldd	r24, Y+34	; 0x22
    3de4:	88 23       	and	r24, r24
    3de6:	09 f0       	breq	.+2      	; 0x3dea <H_KEYPAD_void_getPressedKey+0x86>
    3de8:	a6 c0       	rjmp	.+332    	; 0x3f36 <H_KEYPAD_void_getPressedKey+0x1d2>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	a8 ec       	ldi	r26, 0xC8	; 200
    3df0:	b2 e4       	ldi	r27, 0x42	; 66
    3df2:	8b 87       	std	Y+11, r24	; 0x0b
    3df4:	9c 87       	std	Y+12, r25	; 0x0c
    3df6:	ad 87       	std	Y+13, r26	; 0x0d
    3df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	48 ec       	ldi	r20, 0xC8	; 200
    3e08:	53 e4       	ldi	r21, 0x43	; 67
    3e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	8f 83       	std	Y+7, r24	; 0x07
    3e14:	98 87       	std	Y+8, r25	; 0x08
    3e16:	a9 87       	std	Y+9, r26	; 0x09
    3e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1c:	78 85       	ldd	r23, Y+8	; 0x08
    3e1e:	89 85       	ldd	r24, Y+9	; 0x09
    3e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e8       	ldi	r20, 0x80	; 128
    3e28:	5f e3       	ldi	r21, 0x3F	; 63
    3e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2e:	88 23       	and	r24, r24
    3e30:	2c f4       	brge	.+10     	; 0x3e3c <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	9e 83       	std	Y+6, r25	; 0x06
    3e38:	8d 83       	std	Y+5, r24	; 0x05
    3e3a:	3f c0       	rjmp	.+126    	; 0x3eba <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    3e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e3e:	78 85       	ldd	r23, Y+8	; 0x08
    3e40:	89 85       	ldd	r24, Y+9	; 0x09
    3e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	3f ef       	ldi	r19, 0xFF	; 255
    3e48:	4f e7       	ldi	r20, 0x7F	; 127
    3e4a:	57 e4       	ldi	r21, 0x47	; 71
    3e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e50:	18 16       	cp	r1, r24
    3e52:	4c f5       	brge	.+82     	; 0x3ea6 <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e2       	ldi	r20, 0x20	; 32
    3e62:	51 e4       	ldi	r21, 0x41	; 65
    3e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
    3e7c:	0f c0       	rjmp	.+30     	; 0x3e9c <H_KEYPAD_void_getPressedKey+0x138>
    3e7e:	88 e2       	ldi	r24, 0x28	; 40
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	9c 83       	std	Y+4, r25	; 0x04
    3e84:	8b 83       	std	Y+3, r24	; 0x03
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <H_KEYPAD_void_getPressedKey+0x126>
    3e8e:	9c 83       	std	Y+4, r25	; 0x04
    3e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e92:	8d 81       	ldd	r24, Y+5	; 0x05
    3e94:	9e 81       	ldd	r25, Y+6	; 0x06
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	9e 83       	std	Y+6, r25	; 0x06
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	69 f7       	brne	.-38     	; 0x3e7e <H_KEYPAD_void_getPressedKey+0x11a>
    3ea4:	14 c0       	rjmp	.+40     	; 0x3ece <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea8:	78 85       	ldd	r23, Y+8	; 0x08
    3eaa:	89 85       	ldd	r24, Y+9	; 0x09
    3eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	9e 83       	std	Y+6, r25	; 0x06
    3eb8:	8d 83       	std	Y+5, r24	; 0x05
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebe:	9a 83       	std	Y+2, r25	; 0x02
    3ec0:	89 83       	std	Y+1, r24	; 0x01
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <H_KEYPAD_void_getPressedKey+0x162>
    3eca:	9a 83       	std	Y+2, r25	; 0x02
    3ecc:	89 83       	std	Y+1, r24	; 0x01
			{
				//debouncing delay
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    3ece:	9e 01       	movw	r18, r28
    3ed0:	2e 5d       	subi	r18, 0xDE	; 222
    3ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed4:	83 e0       	ldi	r24, 0x03	; 3
    3ed6:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ed8:	a9 01       	movw	r20, r18
    3eda:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
				if(read==ACTIVE_LOW_PRESSED)
    3ede:	8a a1       	ldd	r24, Y+34	; 0x22
    3ee0:	88 23       	and	r24, r24
    3ee2:	49 f5       	brne	.+82     	; 0x3f36 <H_KEYPAD_void_getPressedKey+0x1d2>
    3ee4:	08 c0       	rjmp	.+16     	; 0x3ef6 <H_KEYPAD_void_getPressedKey+0x192>
				{

						while(read==ACTIVE_LOW_PRESSED)
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    3ee6:	9e 01       	movw	r18, r28
    3ee8:	2e 5d       	subi	r18, 0xDE	; 222
    3eea:	3f 4f       	sbci	r19, 0xFF	; 255
    3eec:	83 e0       	ldi	r24, 0x03	; 3
    3eee:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ef0:	a9 01       	movw	r20, r18
    3ef2:	0e 94 29 0a 	call	0x1452	; 0x1452 <M_DIO_void_getPinValue>
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
				if(read==ACTIVE_LOW_PRESSED)
				{

						while(read==ACTIVE_LOW_PRESSED)
    3ef6:	8a a1       	ldd	r24, Y+34	; 0x22
    3ef8:	88 23       	and	r24, r24
    3efa:	a9 f3       	breq	.-22     	; 0x3ee6 <H_KEYPAD_void_getPressedKey+0x182>
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
						}//while
						loc_Key =loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN][loc_col_indx - KEYPAD_C0_PIN];
    3efc:	88 89       	ldd	r24, Y+16	; 0x10
    3efe:	88 2f       	mov	r24, r24
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	9c 01       	movw	r18, r24
    3f04:	24 50       	subi	r18, 0x04	; 4
    3f06:	30 40       	sbci	r19, 0x00	; 0
    3f08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f0a:	88 2f       	mov	r24, r24
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	ac 01       	movw	r20, r24
    3f10:	42 50       	subi	r20, 0x02	; 2
    3f12:	50 40       	sbci	r21, 0x00	; 0
    3f14:	22 0f       	add	r18, r18
    3f16:	33 1f       	adc	r19, r19
    3f18:	22 0f       	add	r18, r18
    3f1a:	33 1f       	adc	r19, r19
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	01 96       	adiw	r24, 0x01	; 1
    3f20:	82 0f       	add	r24, r18
    3f22:	93 1f       	adc	r25, r19
    3f24:	84 0f       	add	r24, r20
    3f26:	95 1f       	adc	r25, r21
    3f28:	fc 01       	movw	r30, r24
    3f2a:	71 96       	adiw	r30, 0x11	; 17
    3f2c:	80 81       	ld	r24, Z
    3f2e:	89 8b       	std	Y+17, r24	; 0x11
						return loc_Key;
    3f30:	f9 89       	ldd	r31, Y+17	; 0x11
    3f32:	fb a3       	std	Y+35, r31	; 0x23
    3f34:	15 c0       	rjmp	.+42     	; 0x3f60 <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    3f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f38:	8f 5f       	subi	r24, 0xFF	; 255
    3f3a:	8f 87       	std	Y+15, r24	; 0x0f
    3f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f3e:	86 30       	cpi	r24, 0x06	; 6
    3f40:	08 f4       	brcc	.+2      	; 0x3f44 <H_KEYPAD_void_getPressedKey+0x1e0>
    3f42:	47 cf       	rjmp	.-370    	; 0x3dd2 <H_KEYPAD_void_getPressedKey+0x6e>
					}// if 2nd reading
				}// if 1St reading

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	68 89       	ldd	r22, Y+16	; 0x10
    3f48:	41 e0       	ldi	r20, 0x01	; 1
    3f4a:	0e 94 12 09 	call	0x1224	; 0x1224 <M_DIO_void_setPinValue>
	u8 loc_Key= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    3f4e:	88 89       	ldd	r24, Y+16	; 0x10
    3f50:	8f 5f       	subi	r24, 0xFF	; 255
    3f52:	88 8b       	std	Y+16, r24	; 0x10
    3f54:	88 89       	ldd	r24, Y+16	; 0x10
    3f56:	88 30       	cpi	r24, 0x08	; 8
    3f58:	08 f4       	brcc	.+2      	; 0x3f5c <H_KEYPAD_void_getPressedKey+0x1f8>
    3f5a:	33 cf       	rjmp	.-410    	; 0x3dc2 <H_KEYPAD_void_getPressedKey+0x5e>

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
		}
		return loc_Key;
    3f5c:	89 89       	ldd	r24, Y+17	; 0x11
    3f5e:	8b a3       	std	Y+35, r24	; 0x23
    3f60:	8b a1       	ldd	r24, Y+35	; 0x23
	}
    3f62:	a8 96       	adiw	r28, 0x28	; 40
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	08 95       	ret

00003f74 <main>:

#include"LCD_int.h"
#include"ADC_int.h"
u16 *Value;
int main()
{
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	cd b7       	in	r28, 0x3d	; 61
    3f7a:	de b7       	in	r29, 0x3e	; 62
	 H_LCD_void_Init();
    3f7c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <H_LCD_void_Init>
	M_ADC_voidInit();
    3f80:	0e 94 2a 0b 	call	0x1654	; 0x1654 <M_ADC_voidInit>

	while(1)
	{
		M_ADC_voidRead(&Value);
    3f84:	8e e7       	ldi	r24, 0x7E	; 126
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <M_ADC_voidRead>
		H_LCD_void_sendData(&Value);
    3f8c:	8e e7       	ldi	r24, 0x7E	; 126
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	0e 94 65 1b 	call	0x36ca	; 0x36ca <H_LCD_void_sendData>
		H_LCD_void_clear();
    3f94:	0e 94 a5 1b 	call	0x374a	; 0x374a <H_LCD_void_clear>
    3f98:	f5 cf       	rjmp	.-22     	; 0x3f84 <main+0x10>

00003f9a <__udivmodqi4>:
    3f9a:	99 1b       	sub	r25, r25
    3f9c:	79 e0       	ldi	r23, 0x09	; 9
    3f9e:	04 c0       	rjmp	.+8      	; 0x3fa8 <__udivmodqi4_ep>

00003fa0 <__udivmodqi4_loop>:
    3fa0:	99 1f       	adc	r25, r25
    3fa2:	96 17       	cp	r25, r22
    3fa4:	08 f0       	brcs	.+2      	; 0x3fa8 <__udivmodqi4_ep>
    3fa6:	96 1b       	sub	r25, r22

00003fa8 <__udivmodqi4_ep>:
    3fa8:	88 1f       	adc	r24, r24
    3faa:	7a 95       	dec	r23
    3fac:	c9 f7       	brne	.-14     	; 0x3fa0 <__udivmodqi4_loop>
    3fae:	80 95       	com	r24
    3fb0:	08 95       	ret

00003fb2 <__divmodsi4>:
    3fb2:	97 fb       	bst	r25, 7
    3fb4:	09 2e       	mov	r0, r25
    3fb6:	05 26       	eor	r0, r21
    3fb8:	0e d0       	rcall	.+28     	; 0x3fd6 <__divmodsi4_neg1>
    3fba:	57 fd       	sbrc	r21, 7
    3fbc:	04 d0       	rcall	.+8      	; 0x3fc6 <__divmodsi4_neg2>
    3fbe:	14 d0       	rcall	.+40     	; 0x3fe8 <__udivmodsi4>
    3fc0:	0a d0       	rcall	.+20     	; 0x3fd6 <__divmodsi4_neg1>
    3fc2:	00 1c       	adc	r0, r0
    3fc4:	38 f4       	brcc	.+14     	; 0x3fd4 <__divmodsi4_exit>

00003fc6 <__divmodsi4_neg2>:
    3fc6:	50 95       	com	r21
    3fc8:	40 95       	com	r20
    3fca:	30 95       	com	r19
    3fcc:	21 95       	neg	r18
    3fce:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd0:	4f 4f       	sbci	r20, 0xFF	; 255
    3fd2:	5f 4f       	sbci	r21, 0xFF	; 255

00003fd4 <__divmodsi4_exit>:
    3fd4:	08 95       	ret

00003fd6 <__divmodsi4_neg1>:
    3fd6:	f6 f7       	brtc	.-4      	; 0x3fd4 <__divmodsi4_exit>
    3fd8:	90 95       	com	r25
    3fda:	80 95       	com	r24
    3fdc:	70 95       	com	r23
    3fde:	61 95       	neg	r22
    3fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe6:	08 95       	ret

00003fe8 <__udivmodsi4>:
    3fe8:	a1 e2       	ldi	r26, 0x21	; 33
    3fea:	1a 2e       	mov	r1, r26
    3fec:	aa 1b       	sub	r26, r26
    3fee:	bb 1b       	sub	r27, r27
    3ff0:	fd 01       	movw	r30, r26
    3ff2:	0d c0       	rjmp	.+26     	; 0x400e <__udivmodsi4_ep>

00003ff4 <__udivmodsi4_loop>:
    3ff4:	aa 1f       	adc	r26, r26
    3ff6:	bb 1f       	adc	r27, r27
    3ff8:	ee 1f       	adc	r30, r30
    3ffa:	ff 1f       	adc	r31, r31
    3ffc:	a2 17       	cp	r26, r18
    3ffe:	b3 07       	cpc	r27, r19
    4000:	e4 07       	cpc	r30, r20
    4002:	f5 07       	cpc	r31, r21
    4004:	20 f0       	brcs	.+8      	; 0x400e <__udivmodsi4_ep>
    4006:	a2 1b       	sub	r26, r18
    4008:	b3 0b       	sbc	r27, r19
    400a:	e4 0b       	sbc	r30, r20
    400c:	f5 0b       	sbc	r31, r21

0000400e <__udivmodsi4_ep>:
    400e:	66 1f       	adc	r22, r22
    4010:	77 1f       	adc	r23, r23
    4012:	88 1f       	adc	r24, r24
    4014:	99 1f       	adc	r25, r25
    4016:	1a 94       	dec	r1
    4018:	69 f7       	brne	.-38     	; 0x3ff4 <__udivmodsi4_loop>
    401a:	60 95       	com	r22
    401c:	70 95       	com	r23
    401e:	80 95       	com	r24
    4020:	90 95       	com	r25
    4022:	9b 01       	movw	r18, r22
    4024:	ac 01       	movw	r20, r24
    4026:	bd 01       	movw	r22, r26
    4028:	cf 01       	movw	r24, r30
    402a:	08 95       	ret

0000402c <__prologue_saves__>:
    402c:	2f 92       	push	r2
    402e:	3f 92       	push	r3
    4030:	4f 92       	push	r4
    4032:	5f 92       	push	r5
    4034:	6f 92       	push	r6
    4036:	7f 92       	push	r7
    4038:	8f 92       	push	r8
    403a:	9f 92       	push	r9
    403c:	af 92       	push	r10
    403e:	bf 92       	push	r11
    4040:	cf 92       	push	r12
    4042:	df 92       	push	r13
    4044:	ef 92       	push	r14
    4046:	ff 92       	push	r15
    4048:	0f 93       	push	r16
    404a:	1f 93       	push	r17
    404c:	cf 93       	push	r28
    404e:	df 93       	push	r29
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
    4054:	ca 1b       	sub	r28, r26
    4056:	db 0b       	sbc	r29, r27
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	09 94       	ijmp

00004064 <__epilogue_restores__>:
    4064:	2a 88       	ldd	r2, Y+18	; 0x12
    4066:	39 88       	ldd	r3, Y+17	; 0x11
    4068:	48 88       	ldd	r4, Y+16	; 0x10
    406a:	5f 84       	ldd	r5, Y+15	; 0x0f
    406c:	6e 84       	ldd	r6, Y+14	; 0x0e
    406e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4070:	8c 84       	ldd	r8, Y+12	; 0x0c
    4072:	9b 84       	ldd	r9, Y+11	; 0x0b
    4074:	aa 84       	ldd	r10, Y+10	; 0x0a
    4076:	b9 84       	ldd	r11, Y+9	; 0x09
    4078:	c8 84       	ldd	r12, Y+8	; 0x08
    407a:	df 80       	ldd	r13, Y+7	; 0x07
    407c:	ee 80       	ldd	r14, Y+6	; 0x06
    407e:	fd 80       	ldd	r15, Y+5	; 0x05
    4080:	0c 81       	ldd	r16, Y+4	; 0x04
    4082:	1b 81       	ldd	r17, Y+3	; 0x03
    4084:	aa 81       	ldd	r26, Y+2	; 0x02
    4086:	b9 81       	ldd	r27, Y+1	; 0x01
    4088:	ce 0f       	add	r28, r30
    408a:	d1 1d       	adc	r29, r1
    408c:	0f b6       	in	r0, 0x3f	; 63
    408e:	f8 94       	cli
    4090:	de bf       	out	0x3e, r29	; 62
    4092:	0f be       	out	0x3f, r0	; 63
    4094:	cd bf       	out	0x3d, r28	; 61
    4096:	ed 01       	movw	r28, r26
    4098:	08 95       	ret

0000409a <_exit>:
    409a:	f8 94       	cli

0000409c <__stop_program>:
    409c:	ff cf       	rjmp	.-2      	; 0x409c <__stop_program>
